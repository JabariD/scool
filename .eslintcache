[{"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\index.js":"1","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\App.js":"2","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\reportWebVitals.js":"3","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\LandingPage\\LandingPage.js":"4","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\404Page\\FourZeroFour.js":"5","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\firebase\\firebase.js":"6","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\providers\\AuthProvider\\AuthProvider.js":"7","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\SignUpPage\\SignUp.js":"8","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\styles\\MaterialUIStyles.js":"9","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Home\\Home.js":"10","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\components\\SearchBar\\SearchBar.js":"11","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\components\\Header\\Header.js":"12","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\components\\NavigationBar\\NavigationBar.js":"13","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\components\\Question\\Question.js":"14","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Trending\\Trending.js":"15","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Notifications\\Notifications.js":"16","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Messaging\\Messaging.js":"17","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\firebase\\auth\\Authenticate.js":"18","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\firebase\\firestore\\Firestore.js":"19","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\components\\PostQuestionButton\\PostQuestionButton.js":"20","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\components\\QuestionFullPage\\QuestionFullPage.js":"21","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Profile\\Profile.js":"22","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Messaging\\MessagingSearchBar.js":"23","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Messaging\\MessagingConversation.js":"24"},{"size":500,"mtime":1616335653789,"results":"25","hashOfConfig":"26"},{"size":1627,"mtime":1616813479318,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":1611876477865,"results":"28","hashOfConfig":"26"},{"size":4928,"mtime":1614723766824,"results":"29","hashOfConfig":"26"},{"size":173,"mtime":1612406879281,"results":"30","hashOfConfig":"26"},{"size":556,"mtime":1612409840261,"results":"31","hashOfConfig":"26"},{"size":1203,"mtime":1613925190456,"results":"32","hashOfConfig":"26"},{"size":2528,"mtime":1615210266978,"results":"33","hashOfConfig":"26"},{"size":360,"mtime":1613056735440,"results":"34","hashOfConfig":"26"},{"size":5736,"mtime":1617283951239,"results":"35","hashOfConfig":"26"},{"size":2216,"mtime":1617283566350,"results":"36","hashOfConfig":"26"},{"size":2523,"mtime":1615174363609,"results":"37","hashOfConfig":"26"},{"size":1691,"mtime":1614259759348,"results":"38","hashOfConfig":"26"},{"size":9759,"mtime":1616813727019,"results":"39","hashOfConfig":"26"},{"size":2254,"mtime":1615326747669,"results":"40","hashOfConfig":"26"},{"size":378,"mtime":1613684380344,"results":"41","hashOfConfig":"26"},{"size":4966,"mtime":1617284899029,"results":"42","hashOfConfig":"26"},{"size":2099,"mtime":1614481415128,"results":"43","hashOfConfig":"26"},{"size":7650,"mtime":1617285051085,"results":"44","hashOfConfig":"26"},{"size":3653,"mtime":1616036629851,"results":"45","hashOfConfig":"26"},{"size":14061,"mtime":1617677786075,"results":"46","hashOfConfig":"26"},{"size":5405,"mtime":1617677618955,"results":"47","hashOfConfig":"26"},{"size":2401,"mtime":1617283654263,"results":"48","hashOfConfig":"26"},{"size":5188,"mtime":1617284694607,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1yzuez1",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"52"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"52"},"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\index.js",[],["110","111"],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\App.js",[],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\reportWebVitals.js",[],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\LandingPage\\LandingPage.js",["112","113","114"],"import React, { useContext, useState, useCallback, useEffect } from 'react'\r\n\r\n// import Auth context\r\nimport { AuthContext } from '../../providers/AuthProvider/AuthProvider.js';\r\nimport Authenticate from '../../firebase/auth/Authenticate.js';\r\nimport Firestore from '../../firebase/firestore/Firestore.js';\r\n\r\n// React Router\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n// styling\r\nimport \"./LandingPage.css\";\r\nimport ScoolLogo from '../img/logo.png';\r\nimport GoogleLogo from './img/googleLogo.svg';\r\n\r\n// Material UI\r\nimport { buttonStyle } from '../styles/MaterialUIStyles.js'\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    button: buttonStyle,\r\n    googleSignIn: {\r\n        backgroundColor: \"white\",\r\n        fontSize: \"0.8em\",\r\n        width: \"18em\",\r\n        margin: \"0 auto\",\r\n        color: \"black\",\r\n        display: \"block\",\r\n        textTransform: \"none\",\r\n        backgroundImage: `url(${GoogleLogo})`,\r\n        backgroundPosition: \"2px 9px\",\r\n        backgroundRepeat: \"no-repeat\",\r\n    }\r\n  });\r\n\r\nexport default function LandingPage() {\r\n    // Context\r\n    // const user = useContext(AuthContext);\r\n    const DB = new Firestore();\r\n    const Auth = new Authenticate();\r\n\r\n    // MaterialUI\r\n    const classes = useStyles();\r\n\r\n    // State\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n    // History\r\n    const history = useHistory();\r\n    const handleOnClick = useCallback(() => history.push('/signup'), [history]);\r\n\r\n    useEffect( async() => {\r\n        // Confirm user is logged in\r\n        const result = await Auth.IsLoggedIn();\r\n        if (result) {\r\n            // User is signed in.\r\n            history.push('/home');\r\n        }\r\n      });\r\n\r\n    // Behavior\r\n    const emailPasswordSignIn = async(email, password) => {\r\n        try {\r\n            const errorMessage = await Auth.signInWithEmailPassword(email, password);\r\n            if (errorMessage !== \"\") {\r\n                throw errorMessage;\r\n            } else {\r\n                await DB.updateUser(Authenticate.user.uid, {lastLoggedIn: new Date()});\r\n                setEmail(\"\");\r\n                setPassword(\"\");\r\n                setErrorMessage(\"\");\r\n                history.push(\"/home\");\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n            setErrorMessage(e);\r\n        }\r\n    }  \r\n\r\n    const googleSignIn = async() => {\r\n        try {\r\n            const errorMessage = await Auth.signInWithGoogle();\r\n            if (errorMessage !== \"\") {\r\n                throw errorMessage;\r\n            } else {\r\n                const uid = Authenticate.user.uid;\r\n                const email = Authenticate.user.email;\r\n\r\n                const user = await DB.getUser(uid);\r\n\r\n                if (user) await DB.updateUser(uid, {lastLoggedIn: new Date()});\r\n                else await DB.createUser(uid, email);\r\n\r\n                setEmail(\"\");\r\n                setPassword(\"\");\r\n                setErrorMessage(\"\");\r\n                history.push(\"/home\");\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n            setErrorMessage(e);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <header className=\"header-landingPage\">\r\n                <section className=\"logo\">\r\n                    <img src={ScoolLogo} alt=\"Scool Logo\"/>\r\n                    <h1 id=\"company logo\">SCOOL</h1>\r\n                </section>\r\n\r\n                <section className=\"motto\">\r\n                    <h2>Connect.</h2>\r\n                    <h2>Collaborate.</h2>\r\n                    <h2>Succeed.</h2>\r\n                </section>\r\n            </header>\r\n\r\n            <section className=\"email-password\">\r\n                <div className=\"email\">\r\n                    <input type=\"email\" placeholder=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)}/>\r\n                </div>\r\n                <div className=\"password\">\r\n                    <input type=\"password\" placeholder=\"Password\" value={password} onChange={(e) => setPassword(e.target.value)}/>\r\n                </div>\r\n            </section>\r\n\r\n            <section className=\"error\">{errorMessage}</section>\r\n\r\n            <Button variant=\"contained\" className={classes.button} onClick={() => emailPasswordSignIn(email, password)}>\r\n                Log in\r\n            </Button>\r\n            <section className=\"createAccount\">\r\n                <p className=\"create-account\" onClick={handleOnClick}>Sign up</p>\r\n            </section>\r\n\r\n            <section className=\"google-login\">\r\n                <Button variant=\"contained\" className={classes.googleSignIn} onClick={googleSignIn}>\r\n                    Sign up or Log in using Google\r\n                </Button>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\404Page\\FourZeroFour.js",[],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\firebase\\firebase.js",[],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\providers\\AuthProvider\\AuthProvider.js",[],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\SignUpPage\\SignUp.js",["115","116"],"import React, { useState, useContext } from 'react'\r\n\r\n// Firebase Authentication\r\nimport Authenticate from '../../firebase/auth/Authenticate.js';\r\nimport Firestore from '../../firebase/firestore/Firestore.js';\r\n\r\n// import Auth context\r\nimport { AuthContext } from '../../providers/AuthProvider/AuthProvider.js';\r\n\r\n// React Router\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n// styling\r\nimport \"./SignUp.css\";\r\nimport ScoolLogo from '../img/logo.png';\r\n\r\n// materialUI\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button } from '@material-ui/core';\r\nimport { buttonStyle } from '../styles/MaterialUIStyles.js'\r\n\r\nconst useStyles = makeStyles({\r\n    button: buttonStyle,\r\n  });\r\n\r\nexport default function SignUp() {\r\n    const Auth = new Authenticate();\r\n    const DB = new Firestore();\r\n\r\n    const history = useHistory();\r\n\r\n    // MaterialUI\r\n    const classes = useStyles();\r\n\r\n    // State\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n    const emailPasswordSignUp = async() => {\r\n      const errorMessage = await Auth.signUpWithEmailPassword(email, password);\r\n       if (errorMessage !== \"\") {\r\n        setErrorMessage(\"Error: \" + errorMessage);\r\n       } else {\r\n           const currentUserID = Authenticate.user.uid;\r\n           const currentUserEmail = Authenticate.user.email;\r\n           await DB.createUser(currentUserID, currentUserEmail);\r\n           setEmail(\"\");\r\n           setPassword(\"\");\r\n           setErrorMessage(\"\");\r\n           history.push('/home');\r\n       }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <img src={ScoolLogo} alt=\"Scool Logo\" className=\"sign-up-form-logo\"/>\r\n            <h1>Sign up now, free!</h1>\r\n\r\n            <section className=\"email-password\">\r\n                <div className=\"email\">\r\n                    <input type=\"email\" placeholder=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)} required/>\r\n                </div>\r\n                <div className=\"password\">\r\n                    <input type=\"password\" placeholder=\"Password\" value={password} onChange={(e) => setPassword(e.target.value)} required/>\r\n                </div>\r\n                <Button variant=\"contained\" className={classes.button} onClick={emailPasswordSignUp}>\r\n                    Sign Up\r\n                </Button>\r\n                <section className=\"error\">{errorMessage}</section>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\styles\\MaterialUIStyles.js",[],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Home\\Home.js",["117","118","119","120","121","122"],"import React, { useState, useEffect, useContext } from 'react'\r\n\r\nimport { AuthContext } from '../../providers/AuthProvider/AuthProvider.js';\r\n\r\n// import firebase\r\nimport Authenticate from '../../firebase/auth/Authenticate.js';\r\nimport Firestore from '../../firebase/firestore/Firestore.js';\r\n\r\n// React Router\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n// components\r\nimport SearchBar from '../../components/SearchBar/SearchBar.js';\r\nimport Header from '../../components/Header/Header.js';\r\nimport NavigationBar from '../../components/NavigationBar/NavigationBar.js';\r\nimport Question from '../../components/Question/Question.js';\r\nimport PostQuestionButton from '../../components/PostQuestionButton/PostQuestionButton.js';\r\n\r\n// MaterialUI\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { Select, MenuItem, Button, TextField } from '@material-ui/core';\r\n\r\n// styles\r\nimport './Home.css';\r\n\r\nexport default function Home( props ) {\r\n    const history = useHistory();\r\n    const Auth = new Authenticate();\r\n    const DB = new Firestore();\r\n\r\n    // State\r\n    const [subscribeToQuestionList, setSubscribeToQuestionsList] = useState(false);\r\n    const [questions, setQuestions] = useState([]);\r\n    const [questionCollectionID, setQuestionCollectionID] = useState(\"\");\r\n    const [collegeSelected, setCollegeSelected] = useState(null);\r\n\r\n    // if user has not selected college\r\n    const [collegesList, setCollegesList] = useState([]);\r\n\r\n    // confirm user is logged in\r\n    // get questions for user OR show questions list user can subscribe to\r\n\r\n    useEffect( async() => {\r\n        // Confirm user is logged in\r\n        const result = await Auth.IsLoggedIn();\r\n        if (!result) {\r\n            history.push(\"/\");\r\n            return;\r\n        }\r\n\r\n        // get collection ID\r\n        const user = await DB.getUser(Authenticate.user.uid);\r\n        const questionsID = user.questionID; // collectionID of questions user is subscribed to.\r\n\r\n        // if questionID is none allow user to choose subscribe list\r\n        if (questionsID === \"none\") await setUserLocalFeed();\r\n        else await displayQuestion(questionsID);\r\n\r\n        \r\n\r\n      }, []);\r\n\r\n      // user needs to select a local college\r\n      const setUserLocalFeed = async() => {\r\n        const colleges = await DB.queryColleges();\r\n        let tempArray = [];\r\n        colleges.forEach((doc) => {\r\n            // doc.data() is never undefined for query doc snapshots\r\n            const college = doc.data();\r\n\r\n            tempArray.push(college);\r\n        });\r\n        \r\n        setCollegesList(tempArray);\r\n\r\n        setSubscribeToQuestionsList(true);\r\n      }\r\n\r\n      // if user clicks submit, we set the user university for that user\r\n    const setUserUniversity = async() => {\r\n        if (collegeSelected === null) return;\r\n        else await DB.updateUser(Authenticate.user.uid, {questionID: collegeSelected.questionID});\r\n\r\n        // set it to false\r\n        setSubscribeToQuestionsList(false);\r\n        setCollegeSelected(null);\r\n        window.location.reload();\r\n    }\r\n\r\n    const displayQuestion = async(questionCollectionID) => {\r\n        setQuestionCollectionID(questionCollectionID)\r\n     \r\n        // query questions\r\n        const questionsExist = await DB.queryQuestions(questionCollectionID);\r\n        let questionArray = [];\r\n        questionsExist.forEach((doc) => {\r\n            questionArray.push({id: doc.id, data: doc.data()})\r\n        });\r\n        setQuestions(questionArray);\r\n    }\r\n    \r\n\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            \r\n            <Header pageName=\"Home\" />\r\n\r\n            <SearchBar questions={questions} questionCollectionID={questionCollectionID}/> \r\n            {/* {\r\n                (!subscribeToQuestionList) ?\r\n                    <div id=\"home-icon-page\" title=\"Get latest\" onClick={syncQuestion}><i className=\"fas fa-sync\"></i></div>\r\n                :\r\n                    <></>\r\n            } */}\r\n\r\n            <main className=\"questions\">\r\n                { (!subscribeToQuestionList) ? \r\n                    questions.map( (question, index) => {\r\n                        return <Question key={index} question={question} id={questionCollectionID} /> \r\n                    })\r\n                    : \r\n                    <div style={{textAlign: 'center'}}>\r\n                        {/* Will be made into an AutoComplete for better navigation of colleges */}\r\n                        <h3>Choose a university to see questions</h3>\r\n                        <Autocomplete\r\n                            id=\"set-university-text-field\"\r\n                            options={collegesList}\r\n                            getOptionLabel={(college) => college.title}\r\n                            onChange={(e, value) => setCollegeSelected(value)} // prints the selected value\r\n                            style={{ width: 300, marginLeft: 'auto', marginRight: 'auto', }}\r\n                            renderInput={(params) => <TextField {...params} label=\"Set university to...\" variant=\"outlined\" />}\r\n                        />\r\n\r\n                        <Button id=\"set-university-button-submit\" onClick={setUserUniversity}>Submit</Button>\r\n                        <p style={{textAlign: 'center', color: 'grey'}}>This can be changed later.</p>\r\n                    </div>\r\n                \r\n                }\r\n            </main>\r\n\r\n            {\r\n                (!subscribeToQuestionList) ?\r\n                    <PostQuestionButton postTo=\"local\"/>\r\n                :\r\n                    <></>\r\n            }\r\n\r\n            <footer className=\"footer-nav-bar\">\r\n                <NavigationBar currentRoute=\"home\" />\r\n            </footer>\r\n        </div>\r\n    )\r\n}","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\components\\SearchBar\\SearchBar.js",[],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\components\\Header\\Header.js",["123"],"import React, { useState } from 'react'\r\n\r\n// firebase\r\nimport Authenticate from '../../firebase/auth/Authenticate.js';\r\n\r\n// React Router\r\nimport { useHistory, Link } from 'react-router-dom';\r\n\r\n// styles\r\nimport \"./Header.css\";\r\n\r\nimport ScoolLogo from '../../pages/img/logo.png';\r\n\r\n// Material UI\r\nimport { Drawer, List, ListItem, ListItemText, Divider } from '@material-ui/core';\r\n\r\nexport default function Header( props ) {\r\n    const Auth = new Authenticate();\r\n\r\n    const [drawerState, setDrawerState] = useState(false);\r\n\r\n    const toggleDrawer = (state) => (event) => {\r\n        if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n            return;\r\n        }\r\n      \r\n        setDrawerState(state);\r\n    }\r\n\r\n    const history = useHistory();\r\n    const signUserOut = async() => {\r\n        await Auth.signOut();\r\n        history.push('/');\r\n    }\r\n\r\n\r\n    const drawerLinks = () => (\r\n        <div className=\"drawerLinks\" onClick={toggleDrawer(false)} onKeyDown={toggleDrawer(false)}>\r\n            <section>\r\n                <span className=\"profile-image\"><i className=\"fas fa-user-alt\"></i></span>\r\n            </section>\r\n            \r\n\r\n            <List>\r\n                <ListItem>\r\n                    <ListItemText onClick={() => history.push(`/profile/${Authenticate.user.uid}`)} primary={\"Profile\"} />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary={\"Saved\"} />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary={\"Bonuses\"} />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary={\"Settings\"} />\r\n                </ListItem>\r\n                <Divider/>\r\n                <ListItem onClick={signUserOut}>\r\n                    <ListItemText primary={\"Sign Out\"} />\r\n                </ListItem>\r\n            </List>\r\n\r\n        </div>\r\n    );\r\n\r\n\r\n    return (\r\n        <header>\r\n            <div className=\"header-logo\">\r\n                <span className=\"hamburger-menu\" onClick={toggleDrawer(true)}>\r\n                        <i className=\"fas fa-bars\"></i>\r\n                </span>\r\n\r\n                <img src={ScoolLogo} alt=\"Scool logo\"  />\r\n            </div>\r\n            \r\n\r\n            <h2 className=\"header-pageName\">{props.pageName}</h2>\r\n\r\n            <Drawer open={drawerState} onClose={toggleDrawer(false)} >\r\n                {drawerLinks()}\r\n            </Drawer>\r\n            \r\n        </header>\r\n    )\r\n}\r\n","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\components\\NavigationBar\\NavigationBar.js",[],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\components\\Question\\Question.js",["124","125"],"import React, { useState, useEffect } from 'react';\r\n\r\n// react router\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\n\r\n// firestore\r\nimport Firestore from '../../firebase/firestore/Firestore';\r\nimport Authenticate from '../../firebase/auth/Authenticate'\r\n\r\n// css\r\nimport './Question.css';\r\n\r\n// Material UI\r\nimport { Card, CardContent, Menu, MenuItem } from '@material-ui/core'\r\n\r\nexport default function Question(props) {\r\n    const DB = new Firestore(); \r\n    const Auth = new Authenticate();\r\n    const history = useHistory();\r\n\r\n    const [questionEmail, setQuestionEmail] = useState();\r\n    const [questionObject, setQuestionObject] = useState(null);\r\n    const [questionCollectionID, setQuestionCollectionID] = useState(\"\");\r\n    const [id, setID] = useState(\"\");\r\n\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    useEffect(async() => {\r\n      // Confirm user is logged in\r\n      const result = await Auth.IsLoggedIn();\r\n      if (!result) {\r\n          history.push(\"/\");\r\n          return;\r\n      }\r\n\r\n      setID(Authenticate.user.uid);\r\n\r\n      setQuestionObject(props.question);\r\n      await getUserWhoCreatedQuestion();\r\n    }, []);\r\n\r\n\r\n    const CheckUpVoteDownVoteState = () => {\r\n      if (props.question.data.upVotes.includes(id)) {\r\n        return (\r\n          <>\r\n            <span id=\"question-fa-upvote\" onClick={handleUpVotes} style={{color: \"orange\"}}><i className=\"far fa-thumbs-up\"></i></span><span style={fontIconStyle}>{props.question.data.upVotes.length}</span>\r\n            <span id=\"question-fa-downvote\" onClick={handleDownVotes}><i className=\"far fa-thumbs-down\"></i></span><span style={fontIconStyle}>{props.question.data.downVotes.length}</span>\r\n          </>\r\n        )\r\n\r\n      } else if (props.question.data.downVotes.includes(id)) {\r\n        return (\r\n        <>\r\n          <span id=\"question-fa-upvote\" onClick={handleUpVotes}><i className=\"far fa-thumbs-up\"></i></span><span style={fontIconStyle}>{props.question.data.upVotes.length}</span>\r\n          <span id=\"question-fa-downvote\" onClick={handleDownVotes} style={{color: \"orange\"}}><i className=\"far fa-thumbs-down\"></i></span><span style={fontIconStyle}>{props.question.data.downVotes.length}</span>\r\n        </>\r\n        )\r\n      } else {\r\n        return (\r\n        <>\r\n          <span id=\"question-fa-upvote\" onClick={handleUpVotes}><i className=\"far fa-thumbs-up\"></i></span><span style={fontIconStyle}>{props.question.data.upVotes.length}</span>\r\n          <span id=\"question-fa-downvote\" onClick={handleDownVotes}><i className=\"far fa-thumbs-down\"></i></span><span style={fontIconStyle}>{props.question.data.downVotes.length}</span>\r\n        </>\r\n        )\r\n      }\r\n    }\r\n\r\n    const IfUserOwnQuestion = () => {\r\n      if (props.question.data.createdByUserID === id) {\r\n        return (\r\n          <>\r\n            <span aria-controls=\"simple-menu\" aria-haspopup=\"true\" style={{float:'right'}} onClick={(e) => setAnchorEl(e.currentTarget)}><i className=\"fas fa-ellipsis-v\"></i></span>\r\n            <Menu\r\n            id=\"simple-menu\"\r\n            anchorEl={anchorEl}\r\n            keepMounted\r\n            open={Boolean(anchorEl)}\r\n            onClose={() => setAnchorEl(null)}\r\n            >\r\n              <MenuItem onClick={handleAction}>Edit</MenuItem>\r\n              <MenuItem onClick={handleAction}>Delete</MenuItem>\r\n            </Menu>\r\n          </>\r\n         \r\n        )\r\n      } else {\r\n        return <></>\r\n      }\r\n    }\r\n\r\n    const handleAction = () => {\r\n      setAnchorEl(null);\r\n      history.push(`/${props.id}/${questionObject.id}`);\r\n      // call props\r\n    }\r\n\r\n\r\n    const getUserWhoCreatedQuestion = async() => {\r\n      const user = await DB.getUser(props.question.data.createdByUserID);\r\n      if (props.id === \"global\") setQuestionCollectionID(\"global\")\r\n      else setQuestionCollectionID(user.questionID);\r\n      setQuestionEmail(user.email);\r\n    }\r\n\r\n    const fontIconStyle = {\r\n      marginRight: \"10px\",\r\n      textAlign: \"center\",\r\n    }\r\n\r\n\r\n    const handleUpVotes = async() => {\r\n      const userHasTakenNoAction = !questionObject.data.upVotes.includes(Authenticate.user.uid) && !questionObject.data.downVotes.includes(Authenticate.user.uid);\r\n      const userHasUpVoted = questionObject.data.upVotes.includes(Authenticate.user.uid);\r\n\r\n      if (userHasTakenNoAction) {\r\n        // quickly change styling for no delay on UI\r\n        document.getElementById(\"question-fa-upvote\").style.color = \"orange\";\r\n        await userUpVote();\r\n        \r\n        \r\n       \r\n      } else if (userHasUpVoted) {\r\n        // quickly change styling for no delay on UI\r\n        document.getElementById(\"question-fa-upvote\").style.color = \"black\";\r\n        await userRemoveUpVote();\r\n\r\n\r\n      } else {\r\n        // this must mean user has downvoted\r\n        // quickly change styling for no delay on UI\r\n        document.getElementById(\"question-fa-upvote\").style.color = \"orange\";\r\n        document.getElementById(\"question-fa-downvote\").style.color = \"black\";\r\n\r\n        await userRemoveDownVote();\r\n        await userUpVote();\r\n      }\r\n      \r\n    }\r\n\r\n    const handleDownVotes = async() => {\r\n      const userHasTakenNoAction = !questionObject.data.upVotes.includes(Authenticate.user.uid) && !questionObject.data.downVotes.includes(Authenticate.user.uid);\r\n      const userHasDownVoted = questionObject.data.downVotes.includes(Authenticate.user.uid);\r\n\r\n      if ( userHasTakenNoAction ) {\r\n        // quickly change styling for no delay on UI\r\n        document.getElementById(\"question-fa-downvote\").style.color = \"orange\";\r\n        await userDownVote();\r\n\r\n        \r\n\r\n      } else if (userHasDownVoted) {\r\n        // quickly change styling for no delay on UI\r\n        document.getElementById(\"question-fa-downvote\").style.color = \"black\";\r\n        await userRemoveDownVote();\r\n\r\n      } else {\r\n        document.getElementById(\"question-fa-upvote\").style.color = \"black\";\r\n        document.getElementById(\"question-fa-downvote\").style.color = \"orange\";\r\n\r\n        await userRemoveUpVote();\r\n        await userDownVote();\r\n      }\r\n    }\r\n\r\n    const userUpVote = async() => {\r\n      // copy question object\r\n      let tempQuestionObject = { ...questionObject };\r\n      tempQuestionObject.data.upVotes.push(Authenticate.user.uid); // push ID onto state\r\n      setQuestionObject(tempQuestionObject);\r\n      console.log(\"Liked\");\r\n      await DB.updateSpecificQuestion(tempQuestionObject, questionCollectionID);\r\n    }\r\n\r\n    const userRemoveUpVote = async() => {\r\n      // remove user uid from array\r\n      let tempQuestionObject = { ...questionObject };\r\n      const index = tempQuestionObject.data.upVotes.indexOf(Authenticate.user.uid);\r\n      if (index > -1) {\r\n        tempQuestionObject.data.upVotes.splice(index, 1);\r\n      }\r\n\r\n      setQuestionObject(tempQuestionObject);\r\n      console.log(\"Un liked\");\r\n      await DB.updateSpecificQuestion(tempQuestionObject, questionCollectionID);\r\n    }\r\n\r\n    const userDownVote = async() => {\r\n      let tempQuestionObject = { ...questionObject };\r\n        tempQuestionObject.data.downVotes.push(Authenticate.user.uid);\r\n        setQuestionObject(tempQuestionObject);\r\n        console.log(\"Disliked\");\r\n        await DB.updateSpecificQuestion(tempQuestionObject, questionCollectionID);\r\n    }\r\n\r\n    const userRemoveDownVote = async() => {\r\n      // remove user uid from array\r\n      let tempQuestionObject = { ...questionObject };\r\n      const index = tempQuestionObject.data.downVotes.indexOf(Authenticate.user.uid);\r\n      if (index > -1) {\r\n        tempQuestionObject.data.downVotes.splice(index, 1);\r\n      }\r\n\r\n      setQuestionObject(tempQuestionObject);\r\n      console.log(\"Un disliked\");\r\n      await DB.updateSpecificQuestion(tempQuestionObject, questionCollectionID);\r\n    }\r\n\r\n    return (\r\n        <div className=\"question-card-div\">\r\n          {(questionObject) ?\r\n           <Card>\r\n               <CardContent>\r\n                \r\n                    <IfUserOwnQuestion/>\r\n                  \r\n                    <header>\r\n                        <span><i className=\"fas fa-user\"></i></span> \r\n                        {/* User picture goes above here */}\r\n                        <span id=\"question-title\">{questionObject.data.title}</span>\r\n                        <Link to={`/profile/${questionObject.data.createdByUserID}`}><span id=\"question-user\">{questionEmail}</span></Link>\r\n                        \r\n                    </header>\r\n\r\n                    <p>\r\n                        <span>{(questionObject.data.questionBody.length < 110) ? \r\n                        questionObject.data.questionBody\r\n                        :\r\n                        questionObject.data.questionBody.substr(0, 110) + \"...Read more\"\r\n                        }\r\n                        </span>\r\n                    </p>\r\n                    \r\n                    <section className=\"question-tags\">\r\n                        {questionObject.data.tags.map((tag, index) => {\r\n                          return <span key={index} id=\"tag\">{tag}</span>\r\n                        })}\r\n                    </section>\r\n\r\n                    <section>\r\n                     \r\n                      <CheckUpVoteDownVoteState />\r\n                      <span id=\"question-fa-comment\" onClick={() => history.push(`/${props.id}/${questionObject.id}`)}><i className=\"far fa-comment\"></i></span><span style={fontIconStyle}>{Object.keys(questionObject.data.comments).length}</span>\r\n\r\n                    </section>\r\n                    <footer><Link to={`/${props.id}/${questionObject.id}`}>See More.</Link></footer>\r\n               </CardContent>\r\n           </Card>\r\n           :\r\n           <>Unable to grab question content</>\r\n          }\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Trending\\Trending.js",["126","127","128"],"import React, { useEffect, useState, useContext } from 'react'\r\n\r\nimport { AuthContext } from '../../providers/AuthProvider/AuthProvider.js';\r\n\r\n// firebase\r\nimport Authenticate from '../../firebase/auth/Authenticate.js';\r\nimport Firestore from '../../firebase/firestore/Firestore.js';\r\n\r\n// React Router\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n// components\r\nimport Header from '../../components/Header/Header.js';\r\nimport SearchBar from '../../components/SearchBar/SearchBar.js';\r\nimport NavigationBar from '../../components/NavigationBar/NavigationBar.js';\r\nimport Question from '../../components/Question/Question.js';\r\nimport PostQuestionButton from '../../components/PostQuestionButton/PostQuestionButton.js';\r\n\r\n// css\r\nimport './Trending.css';\r\n\r\nexport default function Trending() {\r\n    const history = useHistory();\r\n    const Auth = new Authenticate();\r\n    const DB = new Firestore();\r\n\r\n    const user = useContext(AuthContext);\r\n\r\n    const [globalQuestions, setGlobalQuestions] = useState([]);\r\n\r\n    useEffect( async() => {\r\n        // Confirm user is logged in\r\n        const result = await Auth.IsLoggedIn();\r\n\r\n        if (!result) {\r\n            history.push(\"/\");\r\n            return;\r\n        }\r\n\r\n        // query global questions\r\n        const questionsExist = await DB.queryQuestions(\"global\");\r\n        let questionArray = [];\r\n        questionsExist.forEach((doc) => {\r\n            console.log(doc.data());\r\n            questionArray.push({id: doc.id, data: doc.data()})\r\n        });\r\n        setGlobalQuestions(questionArray);\r\n    }, [])\r\n    return (\r\n        <div className=\"global\">\r\n\r\n            <Header pageName=\"Trending\" />\r\n\r\n            <SearchBar questions={globalQuestions} questionCollectionID=\"global\"/>\r\n\r\n            <main className=\"questions\">\r\n                {\r\n                    globalQuestions.map( (question, index) => {\r\n                        return <Question key={index} question={question} id=\"global\"/> \r\n                    })\r\n                }\r\n            </main>\r\n\r\n            <PostQuestionButton postTo=\"global\"/>\r\n\r\n            <footer className=\"footer-nav-bar\">\r\n                <NavigationBar currentRoute=\"trending\" />\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Notifications\\Notifications.js",[],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Messaging\\Messaging.js",["129","130"],"import React, { useState, useEffect } from 'react'\r\n\r\n// React Router\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n// import firebase\r\nimport Authenticate from '../../firebase/auth/Authenticate.js';\r\nimport Firestore from '../../firebase/firestore/Firestore.js';\r\n\r\n// components\r\nimport Header from '../../components/Header/Header.js';\r\nimport NavigationBar from '../../components/NavigationBar/NavigationBar.js';\r\nimport MessagingSearchBar from './MessagingSearchBar.js';\r\n\r\n// css\r\nimport './Messaging.css';\r\n\r\n// Material Ui\r\nimport { Card, CardContent, Button, Modal, makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '2px solid #000',\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n    },\r\n  }));\r\n\r\nexport default function Messaging(props) {\r\n    const history = useHistory();\r\n    const { userToMessage } = props.location;\r\n\r\n    const classes = useStyles();\r\n\r\n    const Auth = new Authenticate();\r\n    const DB = new Firestore();\r\n\r\n    const [userToDM, setUserToDM] = useState('');\r\n    const [userToDMEmail, setUserToDMEmail] = useState('');\r\n\r\n    const [messages, setMessages] = useState([]);\r\n \r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    useEffect( async() => {\r\n        // Confirm user is logged in\r\n        const result = await Auth.IsLoggedIn();\r\n        if (!result) {\r\n            history.push(\"/\");\r\n            return;\r\n        }\r\n\r\n        // get user DM's from firestore\r\n        const user = await DB.getUser(Authenticate.user.uid);\r\n\r\n        let directMessages = user.directMessages;\r\n\r\n        if (userToMessage !== undefined) {\r\n            // if this user has data to DM someone\r\n            const DM = {};\r\n            setMessages(...messages, DM);\r\n\r\n        }\r\n\r\n        // set email of user\r\n        for (var i = 0; i < directMessages.length; i++) {\r\n            const receiverUser = await DB.getUser(directMessages[i].user);\r\n            const receiverUserEmail = receiverUser.email;\r\n            directMessages[i].userEmail = receiverUserEmail;\r\n\r\n        }\r\n\r\n        console.log(user.directMessages)\r\n        setMessages(user.directMessages);\r\n\r\n    }, []);\r\n\r\n    const getSelectedUser = (userSelected) => {\r\n        if (userSelected) {\r\n            setUserToDM(userSelected);\r\n            setUserToDMEmail(userSelected.data.email);\r\n            setOpen(true);\r\n        }\r\n    }\r\n\r\n    const handleStartConversation = async() => {\r\n        // make conversation component in firestore\r\n        await DB.createConversation(Authenticate.user.uid, userToDM.id);\r\n        setOpen(false);\r\n        window.location.reload();\r\n    }\r\n\r\n    const handleCancelConversation = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n\r\n    const modalBody = () => {\r\n        return (\r\n            <div className={classes.paper} id=\"messaging-modal-div\">\r\n                <h1>Would you like to start a chat with: \"{userToDMEmail}\"</h1>\r\n                <form>\r\n                    <Button onClick={() => handleStartConversation()} variant=\"contained\">Yes</Button>\r\n                    <Button onClick={() => handleCancelConversation()} variant=\"contained\">No</Button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Header pageName=\"Messaging\" />\r\n\r\n            \r\n            <div>\r\n                {/* search people and groups */}\r\n                <MessagingSearchBar getSelectedUser={getSelectedUser}/>\r\n            </div>\r\n\r\n            <main id=\"messaging-conversations-main\">\r\n                {/* Display list of conversations */}\r\n                { \r\n                    messages.map((message, index) => (\r\n                        <div key={index} onClick={() => history.push(`/messaging/${Authenticate.user.uid}/${message.user}`)}>\r\n                            <Card>\r\n                                <CardContent>\r\n                                    <div>\r\n                                        {message.userEmail}\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        {message.lastUpdated}\r\n                                    </div>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </div>\r\n                        ) \r\n                    )\r\n\r\n                }\r\n            </main>\r\n\r\n            <div>\r\n                <Modal\r\n                open={open}\r\n                onClose={() => setOpen(false)}\r\n                aria-labelledby=\"simple-modal-title\"\r\n                aria-describedby=\"simple-modal-description\"\r\n                >\r\n                {modalBody()}\r\n                </Modal>\r\n            </div>\r\n\r\n            <footer className=\"footer-nav-bar\">\r\n                <NavigationBar currentRoute=\"messaging\" />\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\firebase\\auth\\Authenticate.js",[],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\firebase\\firestore\\Firestore.js",["131"],"// Import \r\nimport { firestore } from \"../firebase.js\";\r\n\r\nclass Firestore {\r\n    async createUser(userID, userEmail) {\r\n        console.log(\"Creating user... with ID of...\" + userID);\r\n        try {\r\n            const userToUpdate = firestore.collection(\"users\").doc(userID);\r\n            await userToUpdate.set({\r\n                created: new Date(),\r\n                bio: \"\",\r\n                directMessages: [],\r\n                major: \"\",\r\n                minor: \"\",\r\n                questionsAsked: [],\r\n                graduating: null,\r\n                notifications: [],\r\n                questionID: \"none\",\r\n                email: userEmail,\r\n            });\r\n            console.log(\"Document successfully updated!\");\r\n    \r\n        } catch(e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    async getUser(userID) {\r\n        const userRef = firestore.collection(\"users\").doc(userID);\r\n\r\n        try {\r\n            const userDocument = await userRef.get();\r\n            if (userDocument.exists) {\r\n                return userDocument.data();\r\n            } else {\r\n                console.log(\"The user document you requested does not exist.\")\r\n                return null\r\n            }\r\n        } catch(e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    async getUsers() {\r\n        try {\r\n            const usersRef = firestore.collection(\"users\");\r\n            return await usersRef.get();\r\n        } catch(e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    async updateUser(userID, info) {\r\n        try {\r\n            const userToUpdate = firestore.collection(\"users\").doc(userID);\r\n            await userToUpdate.update(info);\r\n            console.log(\"Document successfully updated!\");\r\n    \r\n        } catch(e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    async queryColleges() {\r\n        try {\r\n            const collegesRef = firestore.collection(\"college\");\r\n            return await collegesRef.get();\r\n        } catch(e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    async queryQuestions(questionID) {\r\n        try {\r\n            const questionsRef = firestore.collection(questionID);\r\n            return await questionsRef.get();\r\n        } catch(e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    async querySpecificQuestion(questionCollectionID, questionDocumentID) {\r\n        const questionRef = firestore.collection(questionCollectionID).doc(questionDocumentID);\r\n\r\n        try {\r\n            const questionDocument = await questionRef.get();\r\n            if (questionDocument.exists) {\r\n                return questionDocument.data();\r\n            } else {\r\n                console.log(\"The specific question you requested does not exist.\")\r\n                return null;\r\n            }\r\n        } catch(e) {\r\n            console.error(e);\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    async postQuestionLocal(questionObject, userID) {\r\n        try {\r\n            await firestore.collection(questionObject.id).add({\r\n                comments: [],\r\n                createdByUserID: userID,\r\n                downVotes: [],\r\n                questionBody: questionObject.body,\r\n                tags: questionObject.tags,\r\n                time_posted: new Date(),\r\n                title: questionObject.title,\r\n                upVotes: [],\r\n            })\r\n            return \"\";\r\n        } catch(e) {\r\n            console.log(e);\r\n            return e;\r\n        }\r\n    }\r\n\r\n    async postQuestionGlobal(questionObject, userID) {\r\n        try {\r\n            await firestore.collection(\"global\").add({\r\n                comments: [],\r\n                createdByUserID: userID,\r\n                downVotes: [],\r\n                questionBody: questionObject.body,\r\n                tags: questionObject.tags,\r\n                time_posted: new Date(),\r\n                title: questionObject.title,\r\n                upVotes: [],\r\n            })\r\n            return \"\";\r\n        } catch(e) {\r\n            console.log(e);\r\n            return e;\r\n        }\r\n    }\r\n\r\n    // NOTE: questionObject must have id field \r\n    async updateSpecificQuestion(questionObject, collectionID) {\r\n        // question object contains ID\r\n        const questionToUpdate = firestore.collection(collectionID).doc(questionObject.id);\r\n        \r\n        try {\r\n            await questionToUpdate.update(questionObject.data);\r\n            console.log(\"Document successfully updated!\");\r\n        } catch(e) {\r\n            console.log(e);\r\n        }\r\n\r\n    }\r\n\r\n    // NOTE: questionObject must have id field \r\n    async deleteSpecificQuestion(questionObject, collectionID) {\r\n        const questionToDelete = firestore.collection(collectionID).doc(questionObject.id);\r\n\r\n        try {\r\n            await questionToDelete.delete();\r\n            console.log(\"Document successfully deleted!\");\r\n        } catch(e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    async createConversation(myID, receiverID) {\r\n\r\n        const myDirectMessage = {\r\n            user: receiverID,\r\n            messages: [],\r\n            createdAt: Date(),\r\n            lastUpdated: Date(),\r\n        }\r\n\r\n        const theirDirectMessage = {\r\n            user: myID,\r\n            messages: [],\r\n            createdAt: Date(),\r\n            lastUpdated: Date(),\r\n        }\r\n\r\n        const me = await this.getUser(myID);\r\n        const them = await this.getUser(receiverID);\r\n\r\n        let myDMs = me.directMessages;\r\n        let themDMs = them.directMessages; \r\n\r\n        myDMs.push(myDirectMessage);\r\n        themDMs.push(theirDirectMessage);\r\n        \r\n        try {\r\n            await this.updateUser(myID, {directMessages: myDMs});\r\n            await this.updateUser(receiverID, {directMessages: themDMs});\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    async putMessageInConversation(myID, message, receiverID) {\r\n        // put message in both users\r\n        const lastUpdated = new Date().toLocaleString();\r\n\r\n        // me first\r\n        const me = await this.getUser(myID)\r\n        let myDirectMessages = me.directMessages;\r\n        // loop and place message in conversation ID\r\n        for (var i = 0; myDirectMessages.length; i++) {\r\n            if (myDirectMessages[i].user === receiverID) {\r\n                // place in messages\r\n                myDirectMessages[i].messages.push(message);\r\n                myDirectMessages[i].lastUpdated = lastUpdated;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        // now them\r\n        const them = await this.getUser(receiverID);\r\n        let theirDirectMessages = them.directMessages;\r\n        // loop and place message in conversation ID\r\n        for (var i = 0; theirDirectMessages.length; i++) {\r\n            if (theirDirectMessages[i].user === myID) {\r\n                // place in messages\r\n                theirDirectMessages[i].messages.push(message);\r\n                theirDirectMessages[i].lastUpdated = lastUpdated;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // error checks\r\n\r\n        // set\r\n        await this.updateUser(myID, {directMessages: myDirectMessages});\r\n        await this.updateUser(receiverID, {directMessages: theirDirectMessages});\r\n    }\r\n\r\n    async setOnSnapshotListener(collectionID, documentID) {\r\n        const documentRef = firestore.collection(collectionID).doc(documentID);\r\n\r\n        documentRef.onSnapshot( (document) => {\r\n            return document.data();\r\n        });\r\n    }\r\n\r\n    async removeSnapshotListener() {\r\n\r\n    }\r\n\r\n    async deleteConversation(receiverID) {\r\n\r\n    }\r\n\r\n    async addNotification() {\r\n\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default Firestore;\r\n\r\n","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\components\\PostQuestionButton\\PostQuestionButton.js",["132"],"import React, { useState, useEffect } from 'react'\r\n\r\n// firebase\r\nimport Firestore from '../../firebase/firestore/Firestore.js';\r\nimport Authenticate from '../../firebase/auth/Authenticate.js';\r\n\r\nimport './PostQuestionButton.css';\r\nimport { TextField, Button, Modal, makeStyles } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '2px solid #000',\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n    },\r\n  }));\r\n\r\nexport default function PostQuestionButton(props) {\r\n    const DB = new Firestore();\r\n    const classes = useStyles();\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const [questionTitle, setQuestionTitle] = useState(\"\");\r\n    const [questionBody, setQuestionBody] = useState(\"\");\r\n    const [questionTags, setQuestionTags] = useState([]);\r\n    const [questionRawTags, setQuestionRawTags] = useState(\"\");\r\n\r\n    \r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleTags = (rawTags) => {\r\n        setQuestionRawTags(rawTags);\r\n        setQuestionTags(rawTags.split(','));\r\n    }\r\n\r\n    const handleSubmitQuestion = async() => {\r\n        \r\n\r\n        if (questionTitle === \"\" || questionBody === \"\" || questionTags.length === 0) {\r\n            console.log(\"Error! No empty fields.\");\r\n            return;\r\n        }\r\n        \r\n        let error = \"\";\r\n        // handles both local and global case\r\n        if (props.postTo === \"local\") { // if a local question\r\n            const currentUser = await DB.getUser(Authenticate.user.uid);\r\n            error = await DB.postQuestionLocal({id: currentUser.questionID, title: questionTitle, body: questionBody, tags: questionTags}, Authenticate.user.uid);\r\n        } else {\r\n            error = await DB.postQuestionGlobal({title: questionTitle, body: questionBody, tags: questionTags}, Authenticate.user.uid);\r\n        }\r\n\r\n        // if no error then we posted\r\n        if (error === \"\") {\r\n            setQuestionTitle(\"\");\r\n            setQuestionBody(\"\");\r\n            setQuestionRawTags(\"\");\r\n            setQuestionTags([]);\r\n            handleClose();\r\n            window.location.reload();\r\n        }\r\n        \r\n    }\r\n\r\n    const modalBody = () => {\r\n        \r\n        return (\r\n            <div className={classes.paper}>\r\n                <h1>Post question to {props.postTo.charAt(0).toUpperCase() + props.postTo.substring(1)}!</h1>\r\n                <form>\r\n                    <TextField id=\"standard-basic\" label=\"Title\" value={questionTitle} onChange={(e) => setQuestionTitle(e.target.value)}/>\r\n                    <TextField id=\"standard-multiline-static\" label=\"Body\" multiline value={questionBody} onChange={(e) => setQuestionBody(e.target.value)} />\r\n                    <TextField id=\"standard-basic\" label=\"Tags\" value={questionRawTags} onChange={(e) => handleTags(e.target.value)} placeholder=\"e.g. calc2, integrals, math\"/>\r\n                    <Button variant=\"contained\" onClick={handleSubmitQuestion}>Submit Question</Button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div id=\"post-question-button\">\r\n            <span id=\"post-question-icon\" className=\"grow\" onClick={() => setOpen(true)}><i className=\"fas fa-plus-circle\"></i></span>\r\n            <Modal\r\n                open={open}\r\n                onClose={() => setOpen(false)}\r\n                aria-labelledby=\"simple-modal-title\"\r\n                aria-describedby=\"simple-modal-description\"\r\n            >\r\n                {modalBody()}\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\components\\QuestionFullPage\\QuestionFullPage.js",["133","134"],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Profile\\Profile.js",["135","136","137","138","139"],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Messaging\\MessagingSearchBar.js",["140","141"],"import React, { useEffect, useState } from 'react'\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nimport Authenticate from '../../firebase/auth/Authenticate.js';\r\nimport Firestore from '../../firebase/firestore/Firestore.js';\r\n\r\nexport default function MessagingSearchBar( props ) {\r\n    const DB = new Firestore();\r\n\r\n    const [users, setUsers] = useState([]);\r\n    const [valueselected, setValueSelected] = useState(null);\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    // 2 options\r\n    // query ALL users and let user search that way\r\n    // as user types make repeated calls to firebase to search.\r\n\r\n    useEffect( async() => {\r\n        const usersInCollection = await DB.getUsers();\r\n        let usersArray = [];\r\n        usersInCollection.forEach((user) => {\r\n            if (user.id !== Authenticate.user.uid)\r\n                usersArray.push({id: user.id, data: user.data()})\r\n        });\r\n        setUsers(usersArray);\r\n        setValueSelected(null);\r\n        setInputValue('');\r\n    }, [] )\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Autocomplete\r\n                valueselected={valueselected}\r\n                onChange={(event, newValue) => {\r\n                    setValueSelected(newValue);\r\n                    props.getSelectedUser(newValue); // send message one component up.\r\n                }}\r\n                inputValue={inputValue}\r\n                onInputChange={(event, newInputValue) => {\r\n                    setInputValue(newInputValue);\r\n                }}\r\n                onKeyDown={(e) => {\r\n                    if (e.keyCode === 13 && valueselected) {\r\n                        props.getSelectedUser(valueselected);\r\n                    }\r\n                }}\r\n                id=\"combo-box-demo\"\r\n                options={users}\r\n                getOptionLabel={(user) => user.data.email}\r\n                style={searchBarStyle}\r\n                freeSolo\r\n                renderInput={(params) => <TextField {...params}  InputProps={{...params.InputProps, disableUnderline: true}} placeholder=\"Search people and groups...\" />}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst searchBarStyle = {\r\n    width: \"300px\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    backgroundColor: \"white\",\r\n    borderRadius: \"18px\",\r\n    paddingTop: \"7px\",\r\n    paddingLeft: \"20px\"\r\n}","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Messaging\\MessagingConversation.js",["142","143","144","145"],"import React, { useEffect, useState, useRef  } from 'react'\r\n\r\n// React Router\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n// import firebase\r\nimport { firestore } from '../../firebase/firebase.js';\r\nimport Authenticate from '../../firebase/auth/Authenticate.js';\r\nimport Firestore from '../../firebase/firestore/Firestore.js';\r\n\r\n// css\r\n// \r\nimport './MessagingConversation.css'\r\nimport { TextField, Button, Card, CardContent } from '@material-ui/core';\r\n\r\nexport default function MessagingConversation(props) {\r\n    const history = useHistory();\r\n    const Auth = new Authenticate();\r\n    const DB = new Firestore();\r\n\r\n    // for header\r\n    const [receiverEmail, setReceiverEmail] = useState(\"\");\r\n\r\n    const [conversation, setConversation] = useState(null);\r\n\r\n    // submitting a message\r\n    const [message, setMessage] = useState('');\r\n\r\n    // scroll into view\r\n    const messagesEndRef = useRef(null)\r\n    \r\n\r\n    //console.log( props.match.params.userID);\r\n    //console.log(props.match.params.receiverID)\r\n\r\n    useEffect( async() => {\r\n        const result = await Auth.IsLoggedIn();\r\n        if (!result) {\r\n            history.push(\"/\");\r\n            return;\r\n        }\r\n\r\n       const user = await DB.getUser(props.match.params.userID);\r\n\r\n       const userDMs = user.directMessages;\r\n        for (var i = 0; i < userDMs.length; i++) {\r\n            if (props.match.params.receiverID === userDMs[i].user) {\r\n                setConversation(userDMs[i]);\r\n                const receiverUser =  await DB.getUser(userDMs[i].user);\r\n                setReceiverEmail(receiverUser.email)\r\n            }\r\n        }\r\n\r\n        // Establish real-time communication for this DB\r\n        const userRef = firestore.collection(\"users\").doc(Authenticate.user.uid);\r\n        userRef.onSnapshot( (document) => {\r\n            // check that messages length has increased or decreased\r\n            const user = document.data();\r\n            const myDirectMessages = user.directMessages;\r\n\r\n            // loop and place message in conversation ID\r\n            for (var i = 0; myDirectMessages.length; i++) {\r\n                if (myDirectMessages[i].user === props.match.params.receiverID) {\r\n                    // place in messages\r\n                    setConversation(myDirectMessages[i]);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            scrollToBottom();\r\n        });\r\n\r\n        scrollToBottom();\r\n    }, [])\r\n\r\n    const handleSubmitMessage = async() => {\r\n        if (message === \"\") {\r\n            console.log(\"Cannot send empty message.\");\r\n            return;\r\n        }\r\n        const userMessage = {\r\n            text: message,\r\n            createdAt: new Date(),\r\n            owner: Authenticate.user.uid,\r\n        }\r\n\r\n        // send to both users in Firebase.\r\n        await DB.putMessageInConversation(Authenticate.user.uid, userMessage, conversation.user);\r\n        setMessage(\"\");\r\n\r\n    }\r\n\r\n    const UserMessage = (props) => \r\n        <div className=\"userMessage\">\r\n            <p>{props.message.text}</p>\r\n            <p>{props.message.createdAt.toDate().toLocaleString()}</p>\r\n        </div>\r\n    \r\n    const ReceiverMessage = (props) => \r\n        <div className=\"receiverMessage\">\r\n            <p>{props.message.text}</p>\r\n            <p>{props.message.createdAt.toDate().toLocaleString()}</p>\r\n        </div>\r\n    \r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n    }\r\n\r\n    const enterPress = async(e) => {\r\n        if (e.keyCode === 13) await handleSubmitMessage();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <header>\r\n                <span onClick={() => history.goBack()} id=\"messaging-back-button\"><i className=\"fas fa-arrow-left\"></i></span>\r\n                <h1>{receiverEmail}</h1>\r\n            </header>\r\n\r\n            {\r\n                (conversation) ? \r\n                <div>\r\n                    <main id=\"messaging-chat-main\">\r\n                        {\r\n                            conversation.messages.map( (message, index) => {\r\n                                    if (message.owner === Authenticate.user.uid)\r\n                                        return <UserMessage key={index} message={message}/>\r\n                                    else {\r\n                                        return <ReceiverMessage key={index} message={message}/>\r\n                                    }\r\n                                }\r\n                            \r\n\r\n                            )\r\n                        }\r\n                        <div ref={messagesEndRef} />\r\n                    </main>\r\n\r\n                    <footer id=\"messaging-conversation-footer\">\r\n                        <TextField style={{display: \"inline\"}} onKeyDown={(e) => enterPress(e)} variant=\"outlined\" placeholder=\"Type message...\" value={message} onChange={(e) => setMessage(e.target.value)} />\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={handleSubmitMessage}>Enter</Button>\r\n                    </footer>\r\n                    \r\n                </div>\r\n                :\r\n                <></>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n",{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":1,"column":17,"nodeType":"152","messageId":"153","endLine":1,"endColumn":27},{"ruleId":"150","severity":1,"message":"154","line":4,"column":10,"nodeType":"152","messageId":"153","endLine":4,"endColumn":21},{"ruleId":"155","severity":1,"message":"156","line":56,"column":16,"nodeType":"157","endLine":63,"endColumn":8},{"ruleId":"150","severity":1,"message":"151","line":1,"column":27,"nodeType":"152","messageId":"153","endLine":1,"endColumn":37},{"ruleId":"150","severity":1,"message":"154","line":8,"column":10,"nodeType":"152","messageId":"153","endLine":8,"endColumn":21},{"ruleId":"150","severity":1,"message":"151","line":1,"column":38,"nodeType":"152","messageId":"153","endLine":1,"endColumn":48},{"ruleId":"150","severity":1,"message":"154","line":3,"column":10,"nodeType":"152","messageId":"153","endLine":3,"endColumn":21},{"ruleId":"150","severity":1,"message":"158","line":21,"column":10,"nodeType":"152","messageId":"153","endLine":21,"endColumn":16},{"ruleId":"150","severity":1,"message":"159","line":21,"column":18,"nodeType":"152","messageId":"153","endLine":21,"endColumn":26},{"ruleId":"155","severity":1,"message":"156","line":43,"column":16,"nodeType":"157","endLine":61,"endColumn":8},{"ruleId":"155","severity":1,"message":"160","line":61,"column":10,"nodeType":"161","endLine":61,"endColumn":12,"suggestions":"162"},{"ruleId":"150","severity":1,"message":"163","line":7,"column":22,"nodeType":"152","messageId":"153","endLine":7,"endColumn":26},{"ruleId":"155","severity":1,"message":"156","line":29,"column":15,"nodeType":"157","endLine":41,"endColumn":6},{"ruleId":"155","severity":1,"message":"164","line":41,"column":8,"nodeType":"161","endLine":41,"endColumn":10,"suggestions":"165"},{"ruleId":"150","severity":1,"message":"166","line":27,"column":11,"nodeType":"152","messageId":"153","endLine":27,"endColumn":15},{"ruleId":"155","severity":1,"message":"156","line":31,"column":16,"nodeType":"157","endLine":48,"endColumn":6},{"ruleId":"155","severity":1,"message":"167","line":48,"column":8,"nodeType":"161","endLine":48,"endColumn":10,"suggestions":"168"},{"ruleId":"155","severity":1,"message":"156","line":47,"column":16,"nodeType":"157","endLine":78,"endColumn":6},{"ruleId":"155","severity":1,"message":"169","line":78,"column":8,"nodeType":"161","endLine":78,"endColumn":10,"suggestions":"170"},{"ruleId":"171","severity":1,"message":"172","line":218,"column":18,"nodeType":"152","messageId":"173","endLine":218,"endColumn":19},{"ruleId":"150","severity":1,"message":"174","line":1,"column":27,"nodeType":"152","messageId":"153","endLine":1,"endColumn":36},{"ruleId":"155","severity":1,"message":"156","line":35,"column":16,"nodeType":"157","endLine":60,"endColumn":6},{"ruleId":"155","severity":1,"message":"175","line":60,"column":8,"nodeType":"161","endLine":60,"endColumn":10,"suggestions":"176"},{"ruleId":"150","severity":1,"message":"177","line":24,"column":12,"nodeType":"152","messageId":"153","endLine":24,"endColumn":22},{"ruleId":"150","severity":1,"message":"178","line":24,"column":24,"nodeType":"152","messageId":"153","endLine":24,"endColumn":37},{"ruleId":"150","severity":1,"message":"179","line":25,"column":12,"nodeType":"152","messageId":"153","endLine":25,"endColumn":17},{"ruleId":"155","severity":1,"message":"156","line":31,"column":16,"nodeType":"157","endLine":43,"endColumn":6},{"ruleId":"155","severity":1,"message":"180","line":43,"column":8,"nodeType":"161","endLine":43,"endColumn":10,"suggestions":"181"},{"ruleId":"155","severity":1,"message":"156","line":20,"column":16,"nodeType":"157","endLine":30,"endColumn":6},{"ruleId":"155","severity":1,"message":"182","line":30,"column":8,"nodeType":"161","endLine":30,"endColumn":10,"suggestions":"183"},{"ruleId":"150","severity":1,"message":"184","line":14,"column":29,"nodeType":"152","messageId":"153","endLine":14,"endColumn":33},{"ruleId":"150","severity":1,"message":"185","line":14,"column":35,"nodeType":"152","messageId":"153","endLine":14,"endColumn":46},{"ruleId":"155","severity":1,"message":"156","line":36,"column":16,"nodeType":"157","endLine":74,"endColumn":6},{"ruleId":"155","severity":1,"message":"186","line":74,"column":8,"nodeType":"161","endLine":74,"endColumn":10,"suggestions":"187"},"no-native-reassign",["188"],"no-negated-in-lhs",["189"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'AuthContext' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'Select' is defined but never used.","'MenuItem' is defined but never used.","React Hook useEffect has missing dependencies: 'Auth', 'DB', 'displayQuestion', 'history', and 'setUserLocalFeed'. Either include them or remove the dependency array.","ArrayExpression",["190"],"'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'Auth', 'getUserWhoCreatedQuestion', 'history', and 'props.question'. Either include them or remove the dependency array. If 'setQuestionObject' needs the current value of 'props.question', you can also switch to useReducer instead of useState and read 'props.question' in the reducer.",["191"],"'user' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'Auth', 'DB', and 'history'. Either include them or remove the dependency array.",["192"],"React Hook useEffect has missing dependencies: 'Auth', 'DB', 'history', 'messages', and 'userToMessage'. Either include them or remove the dependency array. You can also do a functional update 'setMessages(m => ...)' if you only need 'messages' in the 'setMessages' call.",["193"],"no-redeclare","'i' is already defined.","redeclared","'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'Auth', 'DB', 'history', 'props.match.params.collectionID', and 'props.match.params.questionID'. Either include them or remove the dependency array.",["194"],"'contentHot' is assigned a value but never used.","'setContentHot' is assigned a value but never used.","'major' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'Auth', 'DB', 'history', and 'props.match.params.userID'. Either include them or remove the dependency array.",["195"],"React Hook useEffect has a missing dependency: 'DB'. Either include it or remove the dependency array.",["196"],"'Card' is defined but never used.","'CardContent' is defined but never used.","React Hook useEffect has missing dependencies: 'Auth', 'DB', 'history', 'props.match.params.receiverID', and 'props.match.params.userID'. Either include them or remove the dependency array.",["197"],"no-global-assign","no-unsafe-negation",{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},"Update the dependencies array to be: [Auth, DB, displayQuestion, history, setUserLocalFeed]",{"range":"214","text":"215"},"Update the dependencies array to be: [Auth, getUserWhoCreatedQuestion, history, props.question]",{"range":"216","text":"217"},"Update the dependencies array to be: [Auth, DB, history]",{"range":"218","text":"219"},"Update the dependencies array to be: [Auth, DB, history, messages, userToMessage]",{"range":"220","text":"221"},"Update the dependencies array to be: [Auth, DB, history, props.match.params.collectionID, props.match.params.questionID]",{"range":"222","text":"223"},"Update the dependencies array to be: [Auth, DB, history, props.match.params.userID]",{"range":"224","text":"225"},"Update the dependencies array to be: [DB]",{"range":"226","text":"227"},"Update the dependencies array to be: [Auth, DB, history, props.match.params.receiverID, props.match.params.userID]",{"range":"228","text":"229"},[2186,2188],"[Auth, DB, displayQuestion, history, setUserLocalFeed]",[1163,1165],"[Auth, getUserWhoCreatedQuestion, history, props.question]",[1576,1578],"[Auth, DB, history]",[2259,2261],"[Auth, DB, history, messages, userToMessage]",[2284,2286],"[Auth, DB, history, props.match.params.collectionID, props.match.params.questionID]",[1376,1378],"[Auth, DB, history, props.match.params.userID]",[1086,1088],"[DB]",[2441,2443],"[Auth, DB, history, props.match.params.receiverID, props.match.params.userID]"]