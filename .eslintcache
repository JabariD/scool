[{"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\index.js":"1","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\App.js":"2","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\reportWebVitals.js":"3","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\LandingPage\\LandingPage.js":"4","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\404Page\\FourZeroFour.js":"5","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\firebase\\firebase.js":"6","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\providers\\AuthProvider\\AuthProvider.js":"7","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\SignUpPage\\SignUp.js":"8","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\styles\\MaterialUIStyles.js":"9","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Home\\Home.js":"10","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\components\\SearchBar\\SearchBar.js":"11","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\components\\Header\\Header.js":"12","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\components\\NavigationBar\\NavigationBar.js":"13","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\components\\Question\\Question.js":"14","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Trending\\Trending.js":"15","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Notifications\\Notifications.js":"16","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Messaging\\Messaging.js":"17","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\firebase\\auth\\Authenticate.js":"18","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\firebase\\firestore\\Firestore.js":"19","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\components\\PostQuestionButton\\PostQuestionButton.js":"20","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\components\\QuestionFullPage\\QuestionFullPage.js":"21","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Profile\\Profile.js":"22","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Messaging\\MessagingSearchBar.js":"23","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Messaging\\MessagingConversation.js":"24"},{"size":500,"mtime":1616335653789,"results":"25","hashOfConfig":"26"},{"size":1627,"mtime":1616813479318,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":1611876477865,"results":"28","hashOfConfig":"26"},{"size":4928,"mtime":1614723766824,"results":"29","hashOfConfig":"26"},{"size":173,"mtime":1612406879281,"results":"30","hashOfConfig":"26"},{"size":556,"mtime":1612409840261,"results":"31","hashOfConfig":"26"},{"size":1203,"mtime":1613925190456,"results":"32","hashOfConfig":"26"},{"size":2528,"mtime":1615210266978,"results":"33","hashOfConfig":"26"},{"size":360,"mtime":1613056735440,"results":"34","hashOfConfig":"26"},{"size":5736,"mtime":1617283951239,"results":"35","hashOfConfig":"26"},{"size":2216,"mtime":1617283566350,"results":"36","hashOfConfig":"26"},{"size":2523,"mtime":1615174363609,"results":"37","hashOfConfig":"26"},{"size":1691,"mtime":1614259759348,"results":"38","hashOfConfig":"26"},{"size":9759,"mtime":1616813727019,"results":"39","hashOfConfig":"26"},{"size":2254,"mtime":1615326747669,"results":"40","hashOfConfig":"26"},{"size":378,"mtime":1613684380344,"results":"41","hashOfConfig":"26"},{"size":4966,"mtime":1617284899029,"results":"42","hashOfConfig":"26"},{"size":2099,"mtime":1614481415128,"results":"43","hashOfConfig":"26"},{"size":7650,"mtime":1617285051085,"results":"44","hashOfConfig":"26"},{"size":3653,"mtime":1616036629851,"results":"45","hashOfConfig":"26"},{"size":13932,"mtime":1617139749312,"results":"46","hashOfConfig":"26"},{"size":3259,"mtime":1617140282415,"results":"47","hashOfConfig":"26"},{"size":2401,"mtime":1617283654263,"results":"48","hashOfConfig":"26"},{"size":5188,"mtime":1617284694607,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1yzuez1",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"52"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\index.js",[],["107","108"],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\App.js",[],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\reportWebVitals.js",[],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\LandingPage\\LandingPage.js",["109","110","111"],"import React, { useContext, useState, useCallback, useEffect } from 'react'\r\n\r\n// import Auth context\r\nimport { AuthContext } from '../../providers/AuthProvider/AuthProvider.js';\r\nimport Authenticate from '../../firebase/auth/Authenticate.js';\r\nimport Firestore from '../../firebase/firestore/Firestore.js';\r\n\r\n// React Router\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n// styling\r\nimport \"./LandingPage.css\";\r\nimport ScoolLogo from '../img/logo.png';\r\nimport GoogleLogo from './img/googleLogo.svg';\r\n\r\n// Material UI\r\nimport { buttonStyle } from '../styles/MaterialUIStyles.js'\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    button: buttonStyle,\r\n    googleSignIn: {\r\n        backgroundColor: \"white\",\r\n        fontSize: \"0.8em\",\r\n        width: \"18em\",\r\n        margin: \"0 auto\",\r\n        color: \"black\",\r\n        display: \"block\",\r\n        textTransform: \"none\",\r\n        backgroundImage: `url(${GoogleLogo})`,\r\n        backgroundPosition: \"2px 9px\",\r\n        backgroundRepeat: \"no-repeat\",\r\n    }\r\n  });\r\n\r\nexport default function LandingPage() {\r\n    // Context\r\n    // const user = useContext(AuthContext);\r\n    const DB = new Firestore();\r\n    const Auth = new Authenticate();\r\n\r\n    // MaterialUI\r\n    const classes = useStyles();\r\n\r\n    // State\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n    // History\r\n    const history = useHistory();\r\n    const handleOnClick = useCallback(() => history.push('/signup'), [history]);\r\n\r\n    useEffect( async() => {\r\n        // Confirm user is logged in\r\n        const result = await Auth.IsLoggedIn();\r\n        if (result) {\r\n            // User is signed in.\r\n            history.push('/home');\r\n        }\r\n      });\r\n\r\n    // Behavior\r\n    const emailPasswordSignIn = async(email, password) => {\r\n        try {\r\n            const errorMessage = await Auth.signInWithEmailPassword(email, password);\r\n            if (errorMessage !== \"\") {\r\n                throw errorMessage;\r\n            } else {\r\n                await DB.updateUser(Authenticate.user.uid, {lastLoggedIn: new Date()});\r\n                setEmail(\"\");\r\n                setPassword(\"\");\r\n                setErrorMessage(\"\");\r\n                history.push(\"/home\");\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n            setErrorMessage(e);\r\n        }\r\n    }  \r\n\r\n    const googleSignIn = async() => {\r\n        try {\r\n            const errorMessage = await Auth.signInWithGoogle();\r\n            if (errorMessage !== \"\") {\r\n                throw errorMessage;\r\n            } else {\r\n                const uid = Authenticate.user.uid;\r\n                const email = Authenticate.user.email;\r\n\r\n                const user = await DB.getUser(uid);\r\n\r\n                if (user) await DB.updateUser(uid, {lastLoggedIn: new Date()});\r\n                else await DB.createUser(uid, email);\r\n\r\n                setEmail(\"\");\r\n                setPassword(\"\");\r\n                setErrorMessage(\"\");\r\n                history.push(\"/home\");\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n            setErrorMessage(e);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <header className=\"header-landingPage\">\r\n                <section className=\"logo\">\r\n                    <img src={ScoolLogo} alt=\"Scool Logo\"/>\r\n                    <h1 id=\"company logo\">SCOOL</h1>\r\n                </section>\r\n\r\n                <section className=\"motto\">\r\n                    <h2>Connect.</h2>\r\n                    <h2>Collaborate.</h2>\r\n                    <h2>Succeed.</h2>\r\n                </section>\r\n            </header>\r\n\r\n            <section className=\"email-password\">\r\n                <div className=\"email\">\r\n                    <input type=\"email\" placeholder=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)}/>\r\n                </div>\r\n                <div className=\"password\">\r\n                    <input type=\"password\" placeholder=\"Password\" value={password} onChange={(e) => setPassword(e.target.value)}/>\r\n                </div>\r\n            </section>\r\n\r\n            <section className=\"error\">{errorMessage}</section>\r\n\r\n            <Button variant=\"contained\" className={classes.button} onClick={() => emailPasswordSignIn(email, password)}>\r\n                Log in\r\n            </Button>\r\n            <section className=\"createAccount\">\r\n                <p className=\"create-account\" onClick={handleOnClick}>Sign up</p>\r\n            </section>\r\n\r\n            <section className=\"google-login\">\r\n                <Button variant=\"contained\" className={classes.googleSignIn} onClick={googleSignIn}>\r\n                    Sign up or Log in using Google\r\n                </Button>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\404Page\\FourZeroFour.js",[],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\firebase\\firebase.js",[],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\providers\\AuthProvider\\AuthProvider.js",[],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\SignUpPage\\SignUp.js",["112","113"],"import React, { useState, useContext } from 'react'\r\n\r\n// Firebase Authentication\r\nimport Authenticate from '../../firebase/auth/Authenticate.js';\r\nimport Firestore from '../../firebase/firestore/Firestore.js';\r\n\r\n// import Auth context\r\nimport { AuthContext } from '../../providers/AuthProvider/AuthProvider.js';\r\n\r\n// React Router\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n// styling\r\nimport \"./SignUp.css\";\r\nimport ScoolLogo from '../img/logo.png';\r\n\r\n// materialUI\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button } from '@material-ui/core';\r\nimport { buttonStyle } from '../styles/MaterialUIStyles.js'\r\n\r\nconst useStyles = makeStyles({\r\n    button: buttonStyle,\r\n  });\r\n\r\nexport default function SignUp() {\r\n    const Auth = new Authenticate();\r\n    const DB = new Firestore();\r\n\r\n    const history = useHistory();\r\n\r\n    // MaterialUI\r\n    const classes = useStyles();\r\n\r\n    // State\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n    const emailPasswordSignUp = async() => {\r\n      const errorMessage = await Auth.signUpWithEmailPassword(email, password);\r\n       if (errorMessage !== \"\") {\r\n        setErrorMessage(\"Error: \" + errorMessage);\r\n       } else {\r\n           const currentUserID = Authenticate.user.uid;\r\n           const currentUserEmail = Authenticate.user.email;\r\n           await DB.createUser(currentUserID, currentUserEmail);\r\n           setEmail(\"\");\r\n           setPassword(\"\");\r\n           setErrorMessage(\"\");\r\n           history.push('/home');\r\n       }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <img src={ScoolLogo} alt=\"Scool Logo\" className=\"sign-up-form-logo\"/>\r\n            <h1>Sign up now, free!</h1>\r\n\r\n            <section className=\"email-password\">\r\n                <div className=\"email\">\r\n                    <input type=\"email\" placeholder=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)} required/>\r\n                </div>\r\n                <div className=\"password\">\r\n                    <input type=\"password\" placeholder=\"Password\" value={password} onChange={(e) => setPassword(e.target.value)} required/>\r\n                </div>\r\n                <Button variant=\"contained\" className={classes.button} onClick={emailPasswordSignUp}>\r\n                    Sign Up\r\n                </Button>\r\n                <section className=\"error\">{errorMessage}</section>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\styles\\MaterialUIStyles.js",[],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Home\\Home.js",["114","115","116","117","118","119"],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\components\\SearchBar\\SearchBar.js",[],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\components\\Header\\Header.js",["120"],"import React, { useState } from 'react'\r\n\r\n// firebase\r\nimport Authenticate from '../../firebase/auth/Authenticate.js';\r\n\r\n// React Router\r\nimport { useHistory, Link } from 'react-router-dom';\r\n\r\n// styles\r\nimport \"./Header.css\";\r\n\r\nimport ScoolLogo from '../../pages/img/logo.png';\r\n\r\n// Material UI\r\nimport { Drawer, List, ListItem, ListItemText, Divider } from '@material-ui/core';\r\n\r\nexport default function Header( props ) {\r\n    const Auth = new Authenticate();\r\n\r\n    const [drawerState, setDrawerState] = useState(false);\r\n\r\n    const toggleDrawer = (state) => (event) => {\r\n        if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n            return;\r\n        }\r\n      \r\n        setDrawerState(state);\r\n    }\r\n\r\n    const history = useHistory();\r\n    const signUserOut = async() => {\r\n        await Auth.signOut();\r\n        history.push('/');\r\n    }\r\n\r\n\r\n    const drawerLinks = () => (\r\n        <div className=\"drawerLinks\" onClick={toggleDrawer(false)} onKeyDown={toggleDrawer(false)}>\r\n            <section>\r\n                <span className=\"profile-image\"><i className=\"fas fa-user-alt\"></i></span>\r\n            </section>\r\n            \r\n\r\n            <List>\r\n                <ListItem>\r\n                    <ListItemText onClick={() => history.push(`/profile/${Authenticate.user.uid}`)} primary={\"Profile\"} />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary={\"Saved\"} />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary={\"Bonuses\"} />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary={\"Settings\"} />\r\n                </ListItem>\r\n                <Divider/>\r\n                <ListItem onClick={signUserOut}>\r\n                    <ListItemText primary={\"Sign Out\"} />\r\n                </ListItem>\r\n            </List>\r\n\r\n        </div>\r\n    );\r\n\r\n\r\n    return (\r\n        <header>\r\n            <div className=\"header-logo\">\r\n                <span className=\"hamburger-menu\" onClick={toggleDrawer(true)}>\r\n                        <i className=\"fas fa-bars\"></i>\r\n                </span>\r\n\r\n                <img src={ScoolLogo} alt=\"Scool logo\"  />\r\n            </div>\r\n            \r\n\r\n            <h2 className=\"header-pageName\">{props.pageName}</h2>\r\n\r\n            <Drawer open={drawerState} onClose={toggleDrawer(false)} >\r\n                {drawerLinks()}\r\n            </Drawer>\r\n            \r\n        </header>\r\n    )\r\n}\r\n","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\components\\NavigationBar\\NavigationBar.js",[],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\components\\Question\\Question.js",["121","122"],"import React, { useState, useEffect } from 'react';\r\n\r\n// react router\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\n\r\n// firestore\r\nimport Firestore from '../../firebase/firestore/Firestore';\r\nimport Authenticate from '../../firebase/auth/Authenticate'\r\n\r\n// css\r\nimport './Question.css';\r\n\r\n// Material UI\r\nimport { Card, CardContent, Menu, MenuItem } from '@material-ui/core'\r\n\r\nexport default function Question(props) {\r\n    const DB = new Firestore(); \r\n    const Auth = new Authenticate();\r\n    const history = useHistory();\r\n\r\n    const [questionEmail, setQuestionEmail] = useState();\r\n    const [questionObject, setQuestionObject] = useState(null);\r\n    const [questionCollectionID, setQuestionCollectionID] = useState(\"\");\r\n    const [id, setID] = useState(\"\");\r\n\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    useEffect(async() => {\r\n      // Confirm user is logged in\r\n      const result = await Auth.IsLoggedIn();\r\n      if (!result) {\r\n          history.push(\"/\");\r\n          return;\r\n      }\r\n\r\n      setID(Authenticate.user.uid);\r\n\r\n      setQuestionObject(props.question);\r\n      await getUserWhoCreatedQuestion();\r\n    }, []);\r\n\r\n\r\n    const CheckUpVoteDownVoteState = () => {\r\n      if (props.question.data.upVotes.includes(id)) {\r\n        return (\r\n          <>\r\n            <span id=\"question-fa-upvote\" onClick={handleUpVotes} style={{color: \"orange\"}}><i className=\"far fa-thumbs-up\"></i></span><span style={fontIconStyle}>{props.question.data.upVotes.length}</span>\r\n            <span id=\"question-fa-downvote\" onClick={handleDownVotes}><i className=\"far fa-thumbs-down\"></i></span><span style={fontIconStyle}>{props.question.data.downVotes.length}</span>\r\n          </>\r\n        )\r\n\r\n      } else if (props.question.data.downVotes.includes(id)) {\r\n        return (\r\n        <>\r\n          <span id=\"question-fa-upvote\" onClick={handleUpVotes}><i className=\"far fa-thumbs-up\"></i></span><span style={fontIconStyle}>{props.question.data.upVotes.length}</span>\r\n          <span id=\"question-fa-downvote\" onClick={handleDownVotes} style={{color: \"orange\"}}><i className=\"far fa-thumbs-down\"></i></span><span style={fontIconStyle}>{props.question.data.downVotes.length}</span>\r\n        </>\r\n        )\r\n      } else {\r\n        return (\r\n        <>\r\n          <span id=\"question-fa-upvote\" onClick={handleUpVotes}><i className=\"far fa-thumbs-up\"></i></span><span style={fontIconStyle}>{props.question.data.upVotes.length}</span>\r\n          <span id=\"question-fa-downvote\" onClick={handleDownVotes}><i className=\"far fa-thumbs-down\"></i></span><span style={fontIconStyle}>{props.question.data.downVotes.length}</span>\r\n        </>\r\n        )\r\n      }\r\n    }\r\n\r\n    const IfUserOwnQuestion = () => {\r\n      if (props.question.data.createdByUserID === id) {\r\n        return (\r\n          <>\r\n            <span aria-controls=\"simple-menu\" aria-haspopup=\"true\" style={{float:'right'}} onClick={(e) => setAnchorEl(e.currentTarget)}><i className=\"fas fa-ellipsis-v\"></i></span>\r\n            <Menu\r\n            id=\"simple-menu\"\r\n            anchorEl={anchorEl}\r\n            keepMounted\r\n            open={Boolean(anchorEl)}\r\n            onClose={() => setAnchorEl(null)}\r\n            >\r\n              <MenuItem onClick={handleAction}>Edit</MenuItem>\r\n              <MenuItem onClick={handleAction}>Delete</MenuItem>\r\n            </Menu>\r\n          </>\r\n         \r\n        )\r\n      } else {\r\n        return <></>\r\n      }\r\n    }\r\n\r\n    const handleAction = () => {\r\n      setAnchorEl(null);\r\n      history.push(`/${props.id}/${questionObject.id}`);\r\n      // call props\r\n    }\r\n\r\n\r\n    const getUserWhoCreatedQuestion = async() => {\r\n      const user = await DB.getUser(props.question.data.createdByUserID);\r\n      if (props.id === \"global\") setQuestionCollectionID(\"global\")\r\n      else setQuestionCollectionID(user.questionID);\r\n      setQuestionEmail(user.email);\r\n    }\r\n\r\n    const fontIconStyle = {\r\n      marginRight: \"10px\",\r\n      textAlign: \"center\",\r\n    }\r\n\r\n\r\n    const handleUpVotes = async() => {\r\n      const userHasTakenNoAction = !questionObject.data.upVotes.includes(Authenticate.user.uid) && !questionObject.data.downVotes.includes(Authenticate.user.uid);\r\n      const userHasUpVoted = questionObject.data.upVotes.includes(Authenticate.user.uid);\r\n\r\n      if (userHasTakenNoAction) {\r\n        // quickly change styling for no delay on UI\r\n        document.getElementById(\"question-fa-upvote\").style.color = \"orange\";\r\n        await userUpVote();\r\n        \r\n        \r\n       \r\n      } else if (userHasUpVoted) {\r\n        // quickly change styling for no delay on UI\r\n        document.getElementById(\"question-fa-upvote\").style.color = \"black\";\r\n        await userRemoveUpVote();\r\n\r\n\r\n      } else {\r\n        // this must mean user has downvoted\r\n        // quickly change styling for no delay on UI\r\n        document.getElementById(\"question-fa-upvote\").style.color = \"orange\";\r\n        document.getElementById(\"question-fa-downvote\").style.color = \"black\";\r\n\r\n        await userRemoveDownVote();\r\n        await userUpVote();\r\n      }\r\n      \r\n    }\r\n\r\n    const handleDownVotes = async() => {\r\n      const userHasTakenNoAction = !questionObject.data.upVotes.includes(Authenticate.user.uid) && !questionObject.data.downVotes.includes(Authenticate.user.uid);\r\n      const userHasDownVoted = questionObject.data.downVotes.includes(Authenticate.user.uid);\r\n\r\n      if ( userHasTakenNoAction ) {\r\n        // quickly change styling for no delay on UI\r\n        document.getElementById(\"question-fa-downvote\").style.color = \"orange\";\r\n        await userDownVote();\r\n\r\n        \r\n\r\n      } else if (userHasDownVoted) {\r\n        // quickly change styling for no delay on UI\r\n        document.getElementById(\"question-fa-downvote\").style.color = \"black\";\r\n        await userRemoveDownVote();\r\n\r\n      } else {\r\n        document.getElementById(\"question-fa-upvote\").style.color = \"black\";\r\n        document.getElementById(\"question-fa-downvote\").style.color = \"orange\";\r\n\r\n        await userRemoveUpVote();\r\n        await userDownVote();\r\n      }\r\n    }\r\n\r\n    const userUpVote = async() => {\r\n      // copy question object\r\n      let tempQuestionObject = { ...questionObject };\r\n      tempQuestionObject.data.upVotes.push(Authenticate.user.uid); // push ID onto state\r\n      setQuestionObject(tempQuestionObject);\r\n      console.log(\"Liked\");\r\n      await DB.updateSpecificQuestion(tempQuestionObject, questionCollectionID);\r\n    }\r\n\r\n    const userRemoveUpVote = async() => {\r\n      // remove user uid from array\r\n      let tempQuestionObject = { ...questionObject };\r\n      const index = tempQuestionObject.data.upVotes.indexOf(Authenticate.user.uid);\r\n      if (index > -1) {\r\n        tempQuestionObject.data.upVotes.splice(index, 1);\r\n      }\r\n\r\n      setQuestionObject(tempQuestionObject);\r\n      console.log(\"Un liked\");\r\n      await DB.updateSpecificQuestion(tempQuestionObject, questionCollectionID);\r\n    }\r\n\r\n    const userDownVote = async() => {\r\n      let tempQuestionObject = { ...questionObject };\r\n        tempQuestionObject.data.downVotes.push(Authenticate.user.uid);\r\n        setQuestionObject(tempQuestionObject);\r\n        console.log(\"Disliked\");\r\n        await DB.updateSpecificQuestion(tempQuestionObject, questionCollectionID);\r\n    }\r\n\r\n    const userRemoveDownVote = async() => {\r\n      // remove user uid from array\r\n      let tempQuestionObject = { ...questionObject };\r\n      const index = tempQuestionObject.data.downVotes.indexOf(Authenticate.user.uid);\r\n      if (index > -1) {\r\n        tempQuestionObject.data.downVotes.splice(index, 1);\r\n      }\r\n\r\n      setQuestionObject(tempQuestionObject);\r\n      console.log(\"Un disliked\");\r\n      await DB.updateSpecificQuestion(tempQuestionObject, questionCollectionID);\r\n    }\r\n\r\n    return (\r\n        <div className=\"question-card-div\">\r\n          {(questionObject) ?\r\n           <Card>\r\n               <CardContent>\r\n                \r\n                    <IfUserOwnQuestion/>\r\n                  \r\n                    <header>\r\n                        <span><i className=\"fas fa-user\"></i></span> \r\n                        {/* User picture goes above here */}\r\n                        <span id=\"question-title\">{questionObject.data.title}</span>\r\n                        <Link to={`/profile/${questionObject.data.createdByUserID}`}><span id=\"question-user\">{questionEmail}</span></Link>\r\n                        \r\n                    </header>\r\n\r\n                    <p>\r\n                        <span>{(questionObject.data.questionBody.length < 110) ? \r\n                        questionObject.data.questionBody\r\n                        :\r\n                        questionObject.data.questionBody.substr(0, 110) + \"...Read more\"\r\n                        }\r\n                        </span>\r\n                    </p>\r\n                    \r\n                    <section className=\"question-tags\">\r\n                        {questionObject.data.tags.map((tag, index) => {\r\n                          return <span key={index} id=\"tag\">{tag}</span>\r\n                        })}\r\n                    </section>\r\n\r\n                    <section>\r\n                     \r\n                      <CheckUpVoteDownVoteState />\r\n                      <span id=\"question-fa-comment\" onClick={() => history.push(`/${props.id}/${questionObject.id}`)}><i className=\"far fa-comment\"></i></span><span style={fontIconStyle}>{Object.keys(questionObject.data.comments).length}</span>\r\n\r\n                    </section>\r\n                    <footer><Link to={`/${props.id}/${questionObject.id}`}>See More.</Link></footer>\r\n               </CardContent>\r\n           </Card>\r\n           :\r\n           <>Unable to grab question content</>\r\n          }\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Trending\\Trending.js",["123","124","125"],"import React, { useEffect, useState, useContext } from 'react'\r\n\r\nimport { AuthContext } from '../../providers/AuthProvider/AuthProvider.js';\r\n\r\n// firebase\r\nimport Authenticate from '../../firebase/auth/Authenticate.js';\r\nimport Firestore from '../../firebase/firestore/Firestore.js';\r\n\r\n// React Router\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n// components\r\nimport Header from '../../components/Header/Header.js';\r\nimport SearchBar from '../../components/SearchBar/SearchBar.js';\r\nimport NavigationBar from '../../components/NavigationBar/NavigationBar.js';\r\nimport Question from '../../components/Question/Question.js';\r\nimport PostQuestionButton from '../../components/PostQuestionButton/PostQuestionButton.js';\r\n\r\n// css\r\nimport './Trending.css';\r\n\r\nexport default function Trending() {\r\n    const history = useHistory();\r\n    const Auth = new Authenticate();\r\n    const DB = new Firestore();\r\n\r\n    const user = useContext(AuthContext);\r\n\r\n    const [globalQuestions, setGlobalQuestions] = useState([]);\r\n\r\n    useEffect( async() => {\r\n        // Confirm user is logged in\r\n        const result = await Auth.IsLoggedIn();\r\n\r\n        if (!result) {\r\n            history.push(\"/\");\r\n            return;\r\n        }\r\n\r\n        // query global questions\r\n        const questionsExist = await DB.queryQuestions(\"global\");\r\n        let questionArray = [];\r\n        questionsExist.forEach((doc) => {\r\n            console.log(doc.data());\r\n            questionArray.push({id: doc.id, data: doc.data()})\r\n        });\r\n        setGlobalQuestions(questionArray);\r\n    }, [])\r\n    return (\r\n        <div className=\"global\">\r\n\r\n            <Header pageName=\"Trending\" />\r\n\r\n            <SearchBar questions={globalQuestions} questionCollectionID=\"global\"/>\r\n\r\n            <main className=\"questions\">\r\n                {\r\n                    globalQuestions.map( (question, index) => {\r\n                        return <Question key={index} question={question} id=\"global\"/> \r\n                    })\r\n                }\r\n            </main>\r\n\r\n            <PostQuestionButton postTo=\"global\"/>\r\n\r\n            <footer className=\"footer-nav-bar\">\r\n                <NavigationBar currentRoute=\"trending\" />\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Notifications\\Notifications.js",[],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Messaging\\Messaging.js",["126","127"],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\firebase\\auth\\Authenticate.js",[],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\firebase\\firestore\\Firestore.js",["128"],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\components\\PostQuestionButton\\PostQuestionButton.js",["129"],"import React, { useState, useEffect } from 'react'\r\n\r\n// firebase\r\nimport Firestore from '../../firebase/firestore/Firestore.js';\r\nimport Authenticate from '../../firebase/auth/Authenticate.js';\r\n\r\nimport './PostQuestionButton.css';\r\nimport { TextField, Button, Modal, makeStyles } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '2px solid #000',\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n    },\r\n  }));\r\n\r\nexport default function PostQuestionButton(props) {\r\n    const DB = new Firestore();\r\n    const classes = useStyles();\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const [questionTitle, setQuestionTitle] = useState(\"\");\r\n    const [questionBody, setQuestionBody] = useState(\"\");\r\n    const [questionTags, setQuestionTags] = useState([]);\r\n    const [questionRawTags, setQuestionRawTags] = useState(\"\");\r\n\r\n    \r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleTags = (rawTags) => {\r\n        setQuestionRawTags(rawTags);\r\n        setQuestionTags(rawTags.split(','));\r\n    }\r\n\r\n    const handleSubmitQuestion = async() => {\r\n        \r\n\r\n        if (questionTitle === \"\" || questionBody === \"\" || questionTags.length === 0) {\r\n            console.log(\"Error! No empty fields.\");\r\n            return;\r\n        }\r\n        \r\n        let error = \"\";\r\n        // handles both local and global case\r\n        if (props.postTo === \"local\") { // if a local question\r\n            const currentUser = await DB.getUser(Authenticate.user.uid);\r\n            error = await DB.postQuestionLocal({id: currentUser.questionID, title: questionTitle, body: questionBody, tags: questionTags}, Authenticate.user.uid);\r\n        } else {\r\n            error = await DB.postQuestionGlobal({title: questionTitle, body: questionBody, tags: questionTags}, Authenticate.user.uid);\r\n        }\r\n\r\n        // if no error then we posted\r\n        if (error === \"\") {\r\n            setQuestionTitle(\"\");\r\n            setQuestionBody(\"\");\r\n            setQuestionRawTags(\"\");\r\n            setQuestionTags([]);\r\n            handleClose();\r\n            window.location.reload();\r\n        }\r\n        \r\n    }\r\n\r\n    const modalBody = () => {\r\n        \r\n        return (\r\n            <div className={classes.paper}>\r\n                <h1>Post question to {props.postTo.charAt(0).toUpperCase() + props.postTo.substring(1)}!</h1>\r\n                <form>\r\n                    <TextField id=\"standard-basic\" label=\"Title\" value={questionTitle} onChange={(e) => setQuestionTitle(e.target.value)}/>\r\n                    <TextField id=\"standard-multiline-static\" label=\"Body\" multiline value={questionBody} onChange={(e) => setQuestionBody(e.target.value)} />\r\n                    <TextField id=\"standard-basic\" label=\"Tags\" value={questionRawTags} onChange={(e) => handleTags(e.target.value)} placeholder=\"e.g. calc2, integrals, math\"/>\r\n                    <Button variant=\"contained\" onClick={handleSubmitQuestion}>Submit Question</Button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div id=\"post-question-button\">\r\n            <span id=\"post-question-icon\" className=\"grow\" onClick={() => setOpen(true)}><i className=\"fas fa-plus-circle\"></i></span>\r\n            <Modal\r\n                open={open}\r\n                onClose={() => setOpen(false)}\r\n                aria-labelledby=\"simple-modal-title\"\r\n                aria-describedby=\"simple-modal-description\"\r\n            >\r\n                {modalBody()}\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\components\\QuestionFullPage\\QuestionFullPage.js",["130","131"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport Authenticate from '../../firebase/auth/Authenticate.js';\r\nimport Firestore from '../../firebase/firestore/Firestore';\r\n\r\n// React Router\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n// Editable content\r\nimport ContentEditable from \"react-contenteditable\";\r\n\r\n// css\r\nimport \"./QuestionFullPage.css\";\r\n\r\n// Material UI\r\nimport { Card, CardContent, TextField, Button, Modal } from '@material-ui/core'\r\n\r\n\r\nexport default function QuestionFullPage(props) {\r\n    const Auth = new Authenticate();\r\n    const DB = new Firestore();\r\n    const history = useHistory();\r\n\r\n    const [question, setQuestion] = useState(null);\r\n\r\n    const [displayCommentBox, setDisplayCommentBox] = useState(false);\r\n    const [comment, setComment] = useState(\"\");\r\n    const [commentOwners, setCommentOwners] = useState([]);\r\n\r\n    const [questionEditBody, setQuestionEditBody] = useState(\"\");\r\n    const [questionEditTitle, setQuestionEditTitle] = useState(\"\");\r\n    const editableBodyRef = useRef('');\r\n    const editableTitleRef = useRef('');\r\n\r\n    useEffect( async() => {\r\n        // double check logged in\r\n        const result = await Auth.IsLoggedIn();\r\n        if (!result) {\r\n            history.push(\"/\");\r\n            return;\r\n        }\r\n        // get question correct collection is gotten from URL\r\n\r\n        // get question from DB in that collection\r\n        const question = await DB.querySpecificQuestion(props.match.params.collectionID, props.match.params.questionID);\r\n        setQuestion(question);\r\n        setQuestionEditTitle(question.title);\r\n        setQuestionEditBody(question.questionBody);\r\n        console.log(question);\r\n        // get each user that submitted a question and read it\r\n        let usersWhoCreatedComments = [];\r\n        for (var i = 0; i < question.comments.length; i++) {\r\n            const userWhoCreatedComment = question.comments[i].createdByUserID;\r\n            const userWhoCreated = await DB.getUser(userWhoCreatedComment);\r\n            usersWhoCreatedComments.push(userWhoCreated.email);\r\n        }\r\n        setCommentOwners(usersWhoCreatedComments);\r\n\r\n    }, []);\r\n\r\n    const handleUpVotes = async() => {\r\n        const userHasTakenNoAction = !question.upVotes.includes(Authenticate.user.uid) && !question.downVotes.includes(Authenticate.user.uid);\r\n        const userHasUpVoted = question.upVotes.includes(Authenticate.user.uid);\r\n  \r\n        if (userHasTakenNoAction) {\r\n\r\n\r\n          let tempQuestionObject = { ...question };\r\n          tempQuestionObject.upVotes.push(Authenticate.user.uid);\r\n          setQuestion(tempQuestionObject);\r\n          console.log(\"Liked\");\r\n          await DB.updateSpecificQuestion({data: tempQuestionObject, id: props.match.params.questionID}, props.match.params.collectionID);\r\n          // change styling of liked \r\n        } else if (userHasUpVoted) {\r\n\r\n          // remove user uid from array\r\n          let tempQuestionObject = { ...question };\r\n          const index = tempQuestionObject.upVotes.indexOf(Authenticate.user.uid);\r\n          if (index > -1) {\r\n            tempQuestionObject.upVotes.splice(index, 1);\r\n          }\r\n  \r\n          setQuestion(tempQuestionObject);\r\n          console.log(\"Un liked\");\r\n          await DB.updateSpecificQuestion({data: tempQuestionObject, id: props.match.params.questionID}, props.match.params.collectionID);\r\n          // change styling of liked\r\n        }\r\n        \r\n      }\r\n  \r\n    const handleDownVotes = async() => {\r\n        const userHasTakenNoAction = !question.upVotes.includes(Authenticate.user.uid) && !question.downVotes.includes(Authenticate.user.uid);\r\n        const userHasDownVoted = question.downVotes.includes(Authenticate.user.uid);\r\n  \r\n        if ( userHasTakenNoAction ) {\r\n\r\n\r\n          let tempQuestionObject = { ...question };\r\n          tempQuestionObject.downVotes.push(Authenticate.user.uid);\r\n          setQuestion(tempQuestionObject);\r\n          console.log(\"Disliked\");\r\n          await DB.updateSpecificQuestion({data: tempQuestionObject, id: props.match.params.questionID}, props.match.params.collectionID);\r\n          // change styling\r\n        } else if (userHasDownVoted) {\r\n\r\n\r\n          // remove user uid from array\r\n          let tempQuestionObject = { ...question };\r\n          const index = tempQuestionObject.downVotes.indexOf(Authenticate.user.uid);\r\n          if (index > -1) {\r\n            tempQuestionObject.downVotes.splice(index, 1);\r\n          }\r\n  \r\n          setQuestion(tempQuestionObject);\r\n          console.log(\"Un disliked\");\r\n          await DB.updateSpecificQuestion({data: tempQuestionObject, id: props.match.params.questionID}, props.match.params.collectionID);\r\n          // change styling of liked\r\n        }\r\n      }\r\n\r\n    const handleSubmitComment = async() => {\r\n        if (comment === \"\") return null;\r\n        // helper text?\r\n        else {\r\n            let tempQuestion = { ...question };\r\n            const newComment = {createdByUserID: Authenticate.user.uid, body: comment, createdAt: new Date(), upVotes: 0, downVotes: 0, replies: []};\r\n            tempQuestion.comments.push(newComment);\r\n        \r\n            setQuestion(tempQuestion);\r\n            setComment(\"\");\r\n            setDisplayCommentBox(false);\r\n\r\n            await DB.updateSpecificQuestion({data: tempQuestion, id: props.match.params.questionID}, props.match.params.collectionID);\r\n            window.location.reload();\r\n            return;\r\n        }\r\n      }\r\n\r\n      const commentBody = (\r\n        <div id=\"question-full-reply-to-post\">\r\n            <header>\r\n                <div>\r\n                    <Button id=\"cancel-button\" onClick={() => setDisplayCommentBox(false)}>Cancel</Button>\r\n                </div>\r\n\r\n                <div>\r\n                    <Button id=\"post-button\" onClick={handleSubmitComment}>Post</Button>\r\n                </div>\r\n            </header>\r\n            <main>\r\n                <TextField id=\"reply-comment-body\" InputProps={{ disableUnderline: true, multiline: true }} value={comment} onChange={(e) => setComment(e.target.value)} placeholder=\"Reply to this thread...\"></TextField>\r\n            </main>\r\n        </div>\r\n      );\r\n\r\n\r\n    const handleOnSave = async() => {\r\n        const tempQuestion = {...question};\r\n        tempQuestion.questionBody = editableBodyRef.current.innerText;\r\n\r\n        await DB.updateSpecificQuestion({id: props.match.params.questionID, data: tempQuestion}, props.match.params.collectionID);\r\n    }\r\n\r\n    const handleDelete = async() => {\r\n        if (window.confirm(\"Confirm deletion of Question? \\nNOTE: This action cannot be undone!\")) {\r\n            await DB.deleteSpecificQuestion({id: props.match.params.questionID}, props.match.params.collectionID);\r\n            history.goBack();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { (question) ?\r\n                <div>\r\n\r\n                <header className=\"question-full-page-header\">\r\n                    <span id=\"back-icon-full-page\" onClick={() => history.goBack()}><i className=\"fas fa-arrow-left\"></i></span>\r\n                    <h3>Post</h3>\r\n                </header>\r\n\r\n                <div className=\"question-full-page-card\">\r\n                    <Card id=\"question-full-page-card-card\">\r\n                        <CardContent>\r\n                            {\r\n                                (question.createdByUserID === Authenticate.user.uid) ?\r\n                                <div id=\"notes-to-user\">This is your question! Click into the question title and body to edit. Make sure to save!</div>\r\n                                :\r\n                                <></>\r\n                            }\r\n                            <header>\r\n                 \r\n                                { (question.createdByUserID === Authenticate.user.uid) ?\r\n                                 <ContentEditable\r\n                                 innerRef={editableTitleRef}\r\n                                 html={questionEditTitle} // innerHTML of the editable div\r\n                                 disabled={false} // use true to disable edition\r\n                                 onChange={(e) => setQuestionEditTitle(e.target.value)} // handle innerHTML change\r\n                               />\r\n                                :\r\n                                <span id=\"question-full-title\">{question.title}</span>}\r\n                             \r\n                                \r\n                                <span id=\"question-full-user\">{\"User\"}</span>\r\n                                <span>{new Date(question.time_posted.toDate()).toLocaleString()}</span>\r\n                            </header>\r\n\r\n                            <main>\r\n                                <pre>\r\n                                { (question.createdByUserID === Authenticate.user.uid) ?\r\n                                 <ContentEditable\r\n                                 innerRef={editableBodyRef}\r\n                                 html={questionEditBody} // innerHTML of the editable div\r\n                                 disabled={false} // use true to disable edition\r\n                                 onChange={(e) => setQuestionEditBody(e.target.value)} // handle innerHTML change\r\n                               />\r\n                                :\r\n                                question.questionBody}\r\n                                </pre>\r\n     \r\n                            </main>\r\n                            \r\n                            <section className=\"tags\">\r\n                                {question.tags.map((tag, index) => {\r\n                                return <span key={index} id=\"question-full-tag\">{tag}</span>\r\n                                })}\r\n                            </section>\r\n\r\n                            <section className=\"detailed\">\r\n                                {`${question.upVotes.length} Upvotes ${question.downVotes.length} Downvotes ${question.comments.length} Comments`}\r\n                            </section>\r\n\r\n                            <footer className=\"buttons\">\r\n                                <span id=\"question-full-fa-upvote\" onClick={handleUpVotes}><i className=\"far fa-thumbs-up\"></i></span>\r\n\r\n                                <span id=\"question-full-fa-downvote\" onClick={handleDownVotes}><i className=\"far fa-thumbs-down\"></i></span>\r\n\r\n                                <span><i className=\"far fa-comment\" onClick={() => setDisplayCommentBox(!displayCommentBox)}></i></span>\r\n                            </footer>\r\n\r\n                            <section>\r\n                                {\r\n                                    (question.createdByUserID === Authenticate.user.uid) ?\r\n                                    <>\r\n                                        <span onClick={handleOnSave}><i className=\"fas fa-save\"></i></span>\r\n                                        <span onClick={handleDelete}><i className=\"fas fa-trash\"></i></span>\r\n                                        </>\r\n                                        \r\n                                    :\r\n                                    <></>\r\n                                }\r\n                            </section>\r\n                        </CardContent>\r\n                    </Card>\r\n                </div>\r\n\r\n                {\r\n                    <Modal\r\n                    open={displayCommentBox}\r\n                    onClose={() => setDisplayCommentBox(false)}\r\n                    aria-labelledby=\"simple-modal-title\"\r\n                    aria-describedby=\"simple-modal-description\"\r\n                  >\r\n                    {commentBody}\r\n                  </Modal>\r\n                }\r\n\r\n                {/* {\r\n                    (displayCommentBox) ? \r\n                    <Card>\r\n                        <CardContent>\r\n                            <span onClick={() => setDisplayCommentBox(false)}><i className=\"fas fa-times-circle\"></i></span>\r\n                            <TextField value={comment} onChange={(e) => setComment(e.target.value)}></TextField>\r\n                            <Button onClick={handleSubmitComment}>Post</Button>\r\n                        </CardContent>\r\n                    </Card>\r\n                    :\r\n                    <></>\r\n\r\n                } */}\r\n\r\n                {/* Loop through each comments */}\r\n                <div>\r\n                    {\r\n                        question.comments.map((comment, index) => {\r\n                            return (\r\n                                <div key={index}>\r\n                                    <Card id=\"comment-full-page-card\">\r\n                                        <CardContent>\r\n                                            <div>\r\n                                        \r\n                                            </div>\r\n\r\n                                            <div>\r\n                                                <header id=\"comment-full-page-card-header\">\r\n                                                    {commentOwners[index]}\r\n                                                </header>\r\n                                                <main>\r\n                                                    {comment.body}\r\n                                                </main>\r\n    \r\n                                                <section>\r\n                                                    \r\n                                                </section>\r\n\r\n                                            </div>\r\n                               \r\n                                        </CardContent>\r\n                                    </Card>    \r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n\r\n\r\n                </div>\r\n                :\r\n                <></>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Profile\\Profile.js",["132","133"],"import React, { useEffect, useState } from 'react'\r\nimport Header from '../../components/Header/Header'\r\n\r\n// firebase\r\nimport Firestore from '../../firebase/firestore/Firestore';\r\nimport Authenticate from '../../firebase/auth/Authenticate'\r\n\r\n// React Router\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\n// Material UI\r\nimport { Card, CardContent, TextField, Button } from '@material-ui/core'\r\n\r\nexport default function Profile( props ) {\r\n    const history = useHistory();\r\n    const DB = new Firestore();\r\n    const Auth = new Authenticate();\r\n\r\n    const [user, setUser] = useState({});\r\n    const [major, setMajor] = useState(\"\");\r\n\r\n    useEffect( async() => {\r\n        // Confirm user is logged in\r\n        const result = await Auth.IsLoggedIn();\r\n        if (!result) {\r\n            history.push(\"/\");\r\n            return;\r\n        }\r\n\r\n        const user = await DB.getUser(props.match.params.userID);\r\n        setUser(user);\r\n        setMajor(user.major);\r\n        console.log(user)\r\n    }, []);\r\n\r\n    const handleSubmit = () => {\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Header pageName=\"Profile\"/>\r\n\r\n            {\r\n                (props.match.params.userID === Authenticate.user.uid) \r\n                ?\r\n                <main>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <header>\r\n                                <span>{user.email}</span>\r\n                            </header>\r\n\r\n                            <main>\r\n                                <TextField label=\"Major\" value={major} onChange={(e) => setMajor(e.target.value)}></TextField>\r\n                                <TextField label=\"Graduation Date\" type=\"date\" InputLabelProps={{shrink: true}}></TextField>\r\n                            </main>\r\n\r\n                            <footer>\r\n                                <Button onClick={handleSubmit}>Save changes</Button>\r\n                            </footer>\r\n\r\n                            <section>\r\n                                {/* List of ALL user questions */}\r\n                            </section>\r\n                        </CardContent>\r\n                    </Card>\r\n                </main>\r\n                :\r\n                <div>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <header>\r\n                                <span>{user.email}</span>\r\n                            </header>\r\n\r\n                            <main>\r\n                                <span>{user.major}</span>\r\n                                <span>{user.graduating}</span>\r\n                            </main>\r\n\r\n                            <section>\r\n                                {/* Most famous posts of this user */}\r\n                            </section>\r\n\r\n                            <span><Link to={{pathname: \"/messaging\", userToMessage: props.match.params.userID,}} ><i class=\"fas fa-envelope\"></i></Link></span>\r\n                        </CardContent>\r\n                    </Card>\r\n                    \r\n                </div>\r\n            }\r\n\r\n            <footer>\r\n                {/* return button */}\r\n                <Link to=\"/home\">Go home</Link>\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Messaging\\MessagingSearchBar.js",["134","135"],"C:\\Users\\denni\\Documents\\Code\\Projects\\scool\\src\\pages\\Messaging\\MessagingConversation.js",["136","137","138","139"],{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":1,"column":17,"nodeType":"146","messageId":"147","endLine":1,"endColumn":27},{"ruleId":"144","severity":1,"message":"148","line":4,"column":10,"nodeType":"146","messageId":"147","endLine":4,"endColumn":21},{"ruleId":"149","severity":1,"message":"150","line":56,"column":16,"nodeType":"151","endLine":63,"endColumn":8},{"ruleId":"144","severity":1,"message":"145","line":1,"column":27,"nodeType":"146","messageId":"147","endLine":1,"endColumn":37},{"ruleId":"144","severity":1,"message":"148","line":8,"column":10,"nodeType":"146","messageId":"147","endLine":8,"endColumn":21},{"ruleId":"144","severity":1,"message":"145","line":1,"column":38,"nodeType":"146","messageId":"147","endLine":1,"endColumn":48},{"ruleId":"144","severity":1,"message":"148","line":3,"column":10,"nodeType":"146","messageId":"147","endLine":3,"endColumn":21},{"ruleId":"144","severity":1,"message":"152","line":21,"column":10,"nodeType":"146","messageId":"147","endLine":21,"endColumn":16},{"ruleId":"144","severity":1,"message":"153","line":21,"column":18,"nodeType":"146","messageId":"147","endLine":21,"endColumn":26},{"ruleId":"149","severity":1,"message":"150","line":43,"column":16,"nodeType":"151","endLine":61,"endColumn":8},{"ruleId":"149","severity":1,"message":"154","line":61,"column":10,"nodeType":"155","endLine":61,"endColumn":12,"suggestions":"156"},{"ruleId":"144","severity":1,"message":"157","line":7,"column":22,"nodeType":"146","messageId":"147","endLine":7,"endColumn":26},{"ruleId":"149","severity":1,"message":"150","line":29,"column":15,"nodeType":"151","endLine":41,"endColumn":6},{"ruleId":"149","severity":1,"message":"158","line":41,"column":8,"nodeType":"155","endLine":41,"endColumn":10,"suggestions":"159"},{"ruleId":"144","severity":1,"message":"160","line":27,"column":11,"nodeType":"146","messageId":"147","endLine":27,"endColumn":15},{"ruleId":"149","severity":1,"message":"150","line":31,"column":16,"nodeType":"151","endLine":48,"endColumn":6},{"ruleId":"149","severity":1,"message":"161","line":48,"column":8,"nodeType":"155","endLine":48,"endColumn":10,"suggestions":"162"},{"ruleId":"149","severity":1,"message":"150","line":47,"column":16,"nodeType":"151","endLine":78,"endColumn":6},{"ruleId":"149","severity":1,"message":"163","line":78,"column":8,"nodeType":"155","endLine":78,"endColumn":10,"suggestions":"164"},{"ruleId":"165","severity":1,"message":"166","line":218,"column":18,"nodeType":"146","messageId":"167","endLine":218,"endColumn":19},{"ruleId":"144","severity":1,"message":"168","line":1,"column":27,"nodeType":"146","messageId":"147","endLine":1,"endColumn":36},{"ruleId":"149","severity":1,"message":"150","line":34,"column":16,"nodeType":"151","endLine":58,"endColumn":6},{"ruleId":"149","severity":1,"message":"169","line":58,"column":8,"nodeType":"155","endLine":58,"endColumn":10,"suggestions":"170"},{"ruleId":"149","severity":1,"message":"150","line":22,"column":16,"nodeType":"151","endLine":34,"endColumn":6},{"ruleId":"149","severity":1,"message":"171","line":34,"column":8,"nodeType":"155","endLine":34,"endColumn":10,"suggestions":"172"},{"ruleId":"149","severity":1,"message":"150","line":20,"column":16,"nodeType":"151","endLine":30,"endColumn":6},{"ruleId":"149","severity":1,"message":"173","line":30,"column":8,"nodeType":"155","endLine":30,"endColumn":10,"suggestions":"174"},{"ruleId":"144","severity":1,"message":"175","line":14,"column":29,"nodeType":"146","messageId":"147","endLine":14,"endColumn":33},{"ruleId":"144","severity":1,"message":"176","line":14,"column":35,"nodeType":"146","messageId":"147","endLine":14,"endColumn":46},{"ruleId":"149","severity":1,"message":"150","line":36,"column":16,"nodeType":"151","endLine":74,"endColumn":6},{"ruleId":"149","severity":1,"message":"177","line":74,"column":8,"nodeType":"155","endLine":74,"endColumn":10,"suggestions":"178"},"no-native-reassign",["179"],"no-negated-in-lhs",["180"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'AuthContext' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'Select' is defined but never used.","'MenuItem' is defined but never used.","React Hook useEffect has missing dependencies: 'Auth', 'DB', 'displayQuestion', 'history', and 'setUserLocalFeed'. Either include them or remove the dependency array.","ArrayExpression",["181"],"'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'Auth', 'getUserWhoCreatedQuestion', 'history', and 'props.question'. Either include them or remove the dependency array. If 'setQuestionObject' needs the current value of 'props.question', you can also switch to useReducer instead of useState and read 'props.question' in the reducer.",["182"],"'user' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'Auth', 'DB', and 'history'. Either include them or remove the dependency array.",["183"],"React Hook useEffect has missing dependencies: 'Auth', 'DB', 'history', 'messages', and 'userToMessage'. Either include them or remove the dependency array. You can also do a functional update 'setMessages(m => ...)' if you only need 'messages' in the 'setMessages' call.",["184"],"no-redeclare","'i' is already defined.","redeclared","'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'Auth', 'DB', 'history', 'props.match.params.collectionID', and 'props.match.params.questionID'. Either include them or remove the dependency array.",["185"],"React Hook useEffect has missing dependencies: 'Auth', 'DB', 'history', and 'props.match.params.userID'. Either include them or remove the dependency array.",["186"],"React Hook useEffect has a missing dependency: 'DB'. Either include it or remove the dependency array.",["187"],"'Card' is defined but never used.","'CardContent' is defined but never used.","React Hook useEffect has missing dependencies: 'Auth', 'DB', 'history', 'props.match.params.receiverID', and 'props.match.params.userID'. Either include them or remove the dependency array.",["188"],"no-global-assign","no-unsafe-negation",{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},"Update the dependencies array to be: [Auth, DB, displayQuestion, history, setUserLocalFeed]",{"range":"205","text":"206"},"Update the dependencies array to be: [Auth, getUserWhoCreatedQuestion, history, props.question]",{"range":"207","text":"208"},"Update the dependencies array to be: [Auth, DB, history]",{"range":"209","text":"210"},"Update the dependencies array to be: [Auth, DB, history, messages, userToMessage]",{"range":"211","text":"212"},"Update the dependencies array to be: [Auth, DB, history, props.match.params.collectionID, props.match.params.questionID]",{"range":"213","text":"214"},"Update the dependencies array to be: [Auth, DB, history, props.match.params.userID]",{"range":"215","text":"216"},"Update the dependencies array to be: [DB]",{"range":"217","text":"218"},"Update the dependencies array to be: [Auth, DB, history, props.match.params.receiverID, props.match.params.userID]",{"range":"219","text":"220"},[2186,2188],"[Auth, DB, displayQuestion, history, setUserLocalFeed]",[1163,1165],"[Auth, getUserWhoCreatedQuestion, history, props.question]",[1576,1578],"[Auth, DB, history]",[2259,2261],"[Auth, DB, history, messages, userToMessage]",[2164,2166],"[Auth, DB, history, props.match.params.collectionID, props.match.params.questionID]",[1013,1015],"[Auth, DB, history, props.match.params.userID]",[1086,1088],"[DB]",[2441,2443],"[Auth, DB, history, props.match.params.receiverID, props.match.params.userID]"]